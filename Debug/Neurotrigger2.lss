
Neurotrigger2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ca4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00802000  00001ca4  00001d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000214  00802012  00802012  00001d4a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000024a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004432  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d12  00000000  00000000  00006a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013a7  00000000  00000000  00007764  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000820  00000000  00000000  00008b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000de6  00000000  00000000  0000932c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014ef  00000000  00000000  0000a112  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000b601  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
       8:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__vector_2>
       c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      14:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      18:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      1c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      20:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      24:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      28:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      2c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      30:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      34:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      38:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      3c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      44:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      48:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      4c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      50:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      54:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      58:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      5c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      60:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      64:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      68:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      6c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      70:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      74:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      7c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      80:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      84:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      88:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      8c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      90:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      94:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      98:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      9c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      a8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      ac:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      b8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      bc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      c8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      cc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      d8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      dc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      e8:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__vector_58>
      ec:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__vector_59>
      f0:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      f8:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
      fc:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     100:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     104:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     108:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     10c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     110:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__vector_68>
     114:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     118:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     11c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     120:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     124:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     128:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     12c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     130:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     134:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     138:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     13c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     140:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     144:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     148:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     14c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     150:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     154:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     158:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     15c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     160:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     164:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     168:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     16c:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     170:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>
     174:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__bad_interrupt>

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d7 e2       	ldi	r29, 0x27	; 39
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	10 e2       	ldi	r17, 0x20	; 32
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b0 e2       	ldi	r27, 0x20	; 32
     18a:	e4 ea       	ldi	r30, 0xA4	; 164
     18c:	fc e1       	ldi	r31, 0x1C	; 28
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a2 31       	cpi	r26, 0x12	; 18
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	12 e2       	ldi	r17, 0x22	; 34
     19c:	a2 e1       	ldi	r26, 0x12	; 18
     19e:	b0 e2       	ldi	r27, 0x20	; 32
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a6 32       	cpi	r26, 0x26	; 38
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	0e 94 15 02 	call	0x42a	; 0x42a <main>
     1ae:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <_exit>

000001b2 <__bad_interrupt>:
     1b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b6 <ac_output>:
	ACA.AC0MUXCTRL = B8(00000011); //Pos. input = PA0; Neg. Input = PA5; 
	ac_output(ENABLE); //AC output to pin PA7;
}

void ac_output(uint8_t config){
	switch(config){
     1b6:	89 32       	cpi	r24, 0x29	; 41
     1b8:	21 f4       	brne	.+8      	; 0x1c2 <ac_output+0xc>
	case DISABLE:
		ACA.CTRLA = 0x00; //NO AC output to pin PA7;
     1ba:	e0 e8       	ldi	r30, 0x80	; 128
     1bc:	f3 e0       	ldi	r31, 0x03	; 3
     1be:	14 82       	std	Z+4, r1	; 0x04
		break;
     1c0:	08 95       	ret
	case ENABLE:
	default:
		ACA.CTRLA = 0x01; //AC output to pin PA7;	
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	e0 e8       	ldi	r30, 0x80	; 128
     1c6:	f3 e0       	ldi	r31, 0x03	; 3
     1c8:	84 83       	std	Z+4, r24	; 0x04
     1ca:	08 95       	ret

000001cc <init_ac>:

//Handles the Analog Comparator

void init_ac(){
	//hysterysis options: 0mV, 20mV, 50mV
	ACA.AC0CTRL = B8(00001101); //enable AC0; 50mV hysterysis; no interrupts; high-speed mode
     1cc:	e0 e8       	ldi	r30, 0x80	; 128
     1ce:	f3 e0       	ldi	r31, 0x03	; 3
     1d0:	8d e0       	ldi	r24, 0x0D	; 13
     1d2:	80 83       	st	Z, r24
	ACA.AC0MUXCTRL = B8(00000011); //Pos. input = PA0; Neg. Input = PA5; 
     1d4:	83 e0       	ldi	r24, 0x03	; 3
     1d6:	82 83       	std	Z+2, r24	; 0x02
	ac_output(ENABLE); //AC output to pin PA7;
     1d8:	8a e2       	ldi	r24, 0x2A	; 42
     1da:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ac_output>
}
     1de:	08 95       	ret

000001e0 <ac_hysteresis>:
//#############################################################
//## ACs
//#############################################################

void ac_hysteresis(uint8_t amount){
	switch(amount){
     1e0:	81 30       	cpi	r24, 0x01	; 1
     1e2:	31 f0       	breq	.+12     	; 0x1f0 <ac_hysteresis+0x10>
     1e4:	82 30       	cpi	r24, 0x02	; 2
     1e6:	41 f4       	brne	.+16     	; 0x1f8 <ac_hysteresis+0x18>
	case LARGE:
		ACA.AC0CTRL = B8(00001101); //enable AC0; 50mV hysterysis; no interrupts; high-speed mode
     1e8:	8d e0       	ldi	r24, 0x0D	; 13
     1ea:	80 93 80 03 	sts	0x0380, r24
		break;
     1ee:	08 95       	ret
	case SMALL:
		ACA.AC0CTRL = B8(00001011); //enable AC0; 20mV hysterysis; no interrupts; high-speed mode
     1f0:	8b e0       	ldi	r24, 0x0B	; 11
     1f2:	80 93 80 03 	sts	0x0380, r24
		break;
     1f6:	08 95       	ret
	case NONE:
	default:
		ACA.AC0CTRL = B8(00001001); //enable AC0; no hysterysis; no interrupts; high-speed mode		
     1f8:	89 e0       	ldi	r24, 0x09	; 9
     1fa:	80 93 80 03 	sts	0x0380, r24
     1fe:	08 95       	ret

00000200 <ac_polarity>:

//Sets output polarity (e.g. active high or active low output)
void ac_polarity(uint8_t polarity){
	//reverse the comparator inputs to reverse the output polarity
	//pin I/O functions are overridden by the AC unit so I/O inversion is ineffective
	if (polarity == IDLE_HIGH){
     200:	81 30       	cpi	r24, 0x01	; 1
     202:	29 f4       	brne	.+10     	; 0x20e <ac_polarity+0xe>
		ACA.AC0MUXCTRL = B8(00101000); //Pos. input = PA5; Neg. Input = PA0; 
     204:	88 e2       	ldi	r24, 0x28	; 40
     206:	e0 e8       	ldi	r30, 0x80	; 128
     208:	f3 e0       	ldi	r31, 0x03	; 3
     20a:	82 83       	std	Z+2, r24	; 0x02
     20c:	08 95       	ret
	}
	else {
		ACA.AC0MUXCTRL = B8(00000011); //Pos. input = PA0; Neg. Input = PA5; 
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	e0 e8       	ldi	r30, 0x80	; 128
     212:	f3 e0       	ldi	r31, 0x03	; 3
     214:	82 83       	std	Z+2, r24	; 0x02
     216:	08 95       	ret

00000218 <service_ac>:
	}
}

void service_ac(){	
}
     218:	08 95       	ret

0000021a <init_adc>:
#include "adc.h"

//Handles the ADC

void init_adc(){
	ADCA.REFCTRL = B8(00010000); //Use AVCC/1.6 = 2.063V as reference (highest allowed)
     21a:	e0 e0       	ldi	r30, 0x00	; 0
     21c:	f2 e0       	ldi	r31, 0x02	; 2
     21e:	80 e1       	ldi	r24, 0x10	; 16
     220:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CTRLB = B8(00000000); //12bit-right adjusted; One-shot conversion
     222:	11 82       	std	Z+1, r1	; 0x01
	ADCA.CTRLA = B8(00000001); //Enable ADC;
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	90 83       	st	Z, r25
	ADCA.CH0.MUXCTRL = B8(00010000); //CH0 converts from PA2
     228:	81 a3       	lds	r24, 0x51
	ADCA.CH1.MUXCTRL = B8(00011000); //CH1 converts from PA3
     22a:	88 e1       	ldi	r24, 0x18	; 24
     22c:	81 a7       	lds	r24, 0x71
}
     22e:	08 95       	ret

00000230 <adc_ch0>:
//#############################################################

//Performs a single 12-bit conversion on ADC CH0
//BLOCKS UNTIL CONVERSION COMPLETE!
uint16_t adc_ch0(){
	ADCA.CH0.CTRL = B8(10000001); //Single ended input mode; No gain
     230:	81 e8       	ldi	r24, 0x81	; 129
     232:	e0 e0       	ldi	r30, 0x00	; 0
     234:	f2 e0       	ldi	r31, 0x02	; 2
     236:	80 a3       	lds	r24, 0x50
	while(ADCA.CH0.INTFLAGS == 0x00); //wait for conversion to complete
     238:	83 a1       	lds	r24, 0x43
     23a:	88 23       	and	r24, r24
     23c:	e9 f3       	breq	.-6      	; 0x238 <adc_ch0+0x8>
	ADCA.CH0.INTFLAGS = 0x01; //clear the conversion complete flag
     23e:	e0 e0       	ldi	r30, 0x00	; 0
     240:	f2 e0       	ldi	r31, 0x02	; 2
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	83 a3       	lds	r24, 0x53
	return ADCA.CH0.RES;
     246:	84 a1       	lds	r24, 0x44
     248:	95 a1       	lds	r25, 0x45
}
     24a:	08 95       	ret

0000024c <adc_ch1>:

//Performs a single 12-bit conversion on ADC CH1
//BLOCKS UNTIL CONVERSION COMPLETE!
uint16_t adc_ch1(){
	ADCA.CH1.CTRL = B8(10000001); //Single ended input mode; No gain
     24c:	81 e8       	ldi	r24, 0x81	; 129
     24e:	e0 e0       	ldi	r30, 0x00	; 0
     250:	f2 e0       	ldi	r31, 0x02	; 2
     252:	80 a7       	lds	r24, 0x70
	while(ADCA.CH1.INTFLAGS == 0x00); //wait for conversion to complete
     254:	83 a5       	lds	r24, 0x63
     256:	88 23       	and	r24, r24
     258:	e9 f3       	breq	.-6      	; 0x254 <adc_ch1+0x8>
	ADCA.CH1.INTFLAGS = 0x01; //clear the conversion complete flag
     25a:	e0 e0       	ldi	r30, 0x00	; 0
     25c:	f2 e0       	ldi	r31, 0x02	; 2
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	83 a7       	lds	r24, 0x73
	return ADCA.CH1.RES;
     262:	84 a5       	lds	r24, 0x64
     264:	95 a5       	lds	r25, 0x65
}
     266:	08 95       	ret

00000268 <adc_ch0_stats>:

//Average num_to_avg samples and return the result
//Pass in only power-of-2 integers; Max is 2^20;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
     268:	cf 92       	push	r12
     26a:	df 92       	push	r13
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	8c 01       	movw	r16, r24
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
     27a:	10 92 19 20 	sts	0x2019, r1
     27e:	10 92 1a 20 	sts	0x201A, r1
	adc_min = 0xFFFF;
     282:	8f ef       	ldi	r24, 0xFF	; 255
     284:	9f ef       	ldi	r25, 0xFF	; 255
     286:	80 93 1b 20 	sts	0x201B, r24
     28a:	90 93 1c 20 	sts	0x201C, r25
	while(i < num_to_avg){
     28e:	01 15       	cp	r16, r1
     290:	11 05       	cpc	r17, r1
     292:	49 f1       	breq	.+82     	; 0x2e6 <adc_ch0_stats+0x7e>
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
     294:	c0 e0       	ldi	r28, 0x00	; 0
     296:	d0 e0       	ldi	r29, 0x00	; 0
//Pass in only power-of-2 integers; Max is 2^20;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     298:	cc 24       	eor	r12, r12
     29a:	dd 24       	eor	r13, r13
     29c:	76 01       	movw	r14, r12
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
		intermediate = adc_ch0();
     29e:	0e 94 18 01 	call	0x230	; 0x230 <adc_ch0>
		sum += intermediate; //for averaging
     2a2:	ac 01       	movw	r20, r24
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	c4 0e       	add	r12, r20
     2aa:	d5 1e       	adc	r13, r21
     2ac:	e6 1e       	adc	r14, r22
     2ae:	f7 1e       	adc	r15, r23
		if (intermediate < adc_min) adc_min = intermediate; //check min
     2b0:	20 91 1b 20 	lds	r18, 0x201B
     2b4:	30 91 1c 20 	lds	r19, 0x201C
     2b8:	82 17       	cp	r24, r18
     2ba:	93 07       	cpc	r25, r19
     2bc:	20 f4       	brcc	.+8      	; 0x2c6 <adc_ch0_stats+0x5e>
     2be:	80 93 1b 20 	sts	0x201B, r24
     2c2:	90 93 1c 20 	sts	0x201C, r25
		if (intermediate > adc_max) adc_max = intermediate; //check max
     2c6:	20 91 19 20 	lds	r18, 0x2019
     2ca:	30 91 1a 20 	lds	r19, 0x201A
     2ce:	28 17       	cp	r18, r24
     2d0:	39 07       	cpc	r19, r25
     2d2:	20 f4       	brcc	.+8      	; 0x2dc <adc_ch0_stats+0x74>
     2d4:	80 93 19 20 	sts	0x2019, r24
     2d8:	90 93 1a 20 	sts	0x201A, r25
		i++;
     2dc:	21 96       	adiw	r28, 0x01	; 1
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
     2de:	c0 17       	cp	r28, r16
     2e0:	d1 07       	cpc	r29, r17
     2e2:	e9 f6       	brne	.-70     	; 0x29e <adc_ch0_stats+0x36>
     2e4:	03 c0       	rjmp	.+6      	; 0x2ec <adc_ch0_stats+0x84>
//Pass in only power-of-2 integers; Max is 2^20;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch0_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     2e6:	cc 24       	eor	r12, r12
     2e8:	dd 24       	eor	r13, r13
     2ea:	76 01       	movw	r14, r12
		sum += intermediate; //for averaging
		if (intermediate < adc_min) adc_min = intermediate; //check min
		if (intermediate > adc_max) adc_max = intermediate; //check max
		i++;
	}
	adc_count = num_to_avg;
     2ec:	00 93 16 20 	sts	0x2016, r16
	adc_avg = sum / num_to_avg;
     2f0:	98 01       	movw	r18, r16
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	c7 01       	movw	r24, r14
     2f8:	b6 01       	movw	r22, r12
     2fa:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__udivmodsi4>
     2fe:	20 93 17 20 	sts	0x2017, r18
     302:	30 93 18 20 	sts	0x2018, r19
}
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	ff 90       	pop	r15
     310:	ef 90       	pop	r14
     312:	df 90       	pop	r13
     314:	cf 90       	pop	r12
     316:	08 95       	ret

00000318 <adc_ch1_stats>:

//Average num_to_avg samples and return the result
//Pass in only power-of-2 integers; Max is 2^20?;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
     318:	cf 92       	push	r12
     31a:	df 92       	push	r13
     31c:	ef 92       	push	r14
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	8c 01       	movw	r16, r24
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
     32a:	10 92 19 20 	sts	0x2019, r1
     32e:	10 92 1a 20 	sts	0x201A, r1
	adc_min = 0xFFFF;
     332:	8f ef       	ldi	r24, 0xFF	; 255
     334:	9f ef       	ldi	r25, 0xFF	; 255
     336:	80 93 1b 20 	sts	0x201B, r24
     33a:	90 93 1c 20 	sts	0x201C, r25
	while(i < num_to_avg){
     33e:	01 15       	cp	r16, r1
     340:	11 05       	cpc	r17, r1
     342:	49 f1       	breq	.+82     	; 0x396 <adc_ch1_stats+0x7e>
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
     344:	c0 e0       	ldi	r28, 0x00	; 0
     346:	d0 e0       	ldi	r29, 0x00	; 0
//Pass in only power-of-2 integers; Max is 2^20?;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     348:	cc 24       	eor	r12, r12
     34a:	dd 24       	eor	r13, r13
     34c:	76 01       	movw	r14, r12
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
		intermediate = adc_ch1();
     34e:	0e 94 26 01 	call	0x24c	; 0x24c <adc_ch1>
		sum += intermediate; //for averaging
     352:	ac 01       	movw	r20, r24
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	c4 0e       	add	r12, r20
     35a:	d5 1e       	adc	r13, r21
     35c:	e6 1e       	adc	r14, r22
     35e:	f7 1e       	adc	r15, r23
		if (intermediate < adc_min) adc_min = intermediate; //check min
     360:	20 91 1b 20 	lds	r18, 0x201B
     364:	30 91 1c 20 	lds	r19, 0x201C
     368:	82 17       	cp	r24, r18
     36a:	93 07       	cpc	r25, r19
     36c:	20 f4       	brcc	.+8      	; 0x376 <adc_ch1_stats+0x5e>
     36e:	80 93 1b 20 	sts	0x201B, r24
     372:	90 93 1c 20 	sts	0x201C, r25
		if (intermediate > adc_max) adc_max = intermediate; //check max
     376:	20 91 19 20 	lds	r18, 0x2019
     37a:	30 91 1a 20 	lds	r19, 0x201A
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	20 f4       	brcc	.+8      	; 0x38c <adc_ch1_stats+0x74>
     384:	80 93 19 20 	sts	0x2019, r24
     388:	90 93 1a 20 	sts	0x201A, r25
		i++;
     38c:	21 96       	adiw	r28, 0x01	; 1
	uint16_t intermediate;
	uint32_t sum = 0;
	uint16_t i = 0;
	adc_max = 0;
	adc_min = 0xFFFF;
	while(i < num_to_avg){
     38e:	c0 17       	cp	r28, r16
     390:	d1 07       	cpc	r29, r17
     392:	e9 f6       	brne	.-70     	; 0x34e <adc_ch1_stats+0x36>
     394:	03 c0       	rjmp	.+6      	; 0x39c <adc_ch1_stats+0x84>
//Pass in only power-of-2 integers; Max is 2^20?;
//BLOCKS UNTIL ALL CONVERSIONS COMPLETE! USE WITH CAUTION!
//Updates the global adc_stats variables (adc_avg, adc_max, etc)
void adc_ch1_stats(uint16_t num_to_avg){
	uint16_t intermediate;
	uint32_t sum = 0;
     396:	cc 24       	eor	r12, r12
     398:	dd 24       	eor	r13, r13
     39a:	76 01       	movw	r14, r12
		sum += intermediate; //for averaging
		if (intermediate < adc_min) adc_min = intermediate; //check min
		if (intermediate > adc_max) adc_max = intermediate; //check max
		i++;
	}
	adc_count = num_to_avg;
     39c:	00 93 16 20 	sts	0x2016, r16
	adc_avg = sum / num_to_avg;
     3a0:	98 01       	movw	r18, r16
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	c7 01       	movw	r24, r14
     3a8:	b6 01       	movw	r22, r12
     3aa:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__udivmodsi4>
     3ae:	20 93 17 20 	sts	0x2017, r18
     3b2:	30 93 18 20 	sts	0x2018, r19
}
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	08 95       	ret

000003c8 <service_adc>:

void service_adc(){	
}
     3c8:	08 95       	ret

000003ca <init_dac>:
#include "ui.h"

//Handles the DAC for PORTB

void init_dac(){
	DACB.CTRLA = B8(00001101); //enable DAC and both output pins
     3ca:	e0 e2       	ldi	r30, 0x20	; 32
     3cc:	f3 e0       	ldi	r31, 0x03	; 3
     3ce:	8d e0       	ldi	r24, 0x0D	; 13
     3d0:	80 83       	st	Z, r24
	DACB.CTRLB = B8(01000000); //enable sample-and-hold to allow for independent output operation
     3d2:	80 e4       	ldi	r24, 0x40	; 64
     3d4:	81 83       	std	Z+1, r24	; 0x01
	DACB.CTRLC = B8(00001000); //use AVCC as the reference
     3d6:	88 e0       	ldi	r24, 0x08	; 8
     3d8:	82 83       	std	Z+2, r24	; 0x02
}
     3da:	08 95       	ret

000003dc <dac_output0>:

void dac_output0(uint8_t config){
	switch(config){
     3dc:	89 32       	cpi	r24, 0x29	; 41
     3de:	31 f4       	brne	.+12     	; 0x3ec <dac_output0+0x10>
	case DISABLE:
		DACB.CTRLA = DACB.CTRLA & B8(11111011); //NO DAC output to pin PB2
     3e0:	e0 e2       	ldi	r30, 0x20	; 32
     3e2:	f3 e0       	ldi	r31, 0x03	; 3
     3e4:	80 81       	ld	r24, Z
     3e6:	8b 7f       	andi	r24, 0xFB	; 251
     3e8:	80 83       	st	Z, r24
		break;
     3ea:	08 95       	ret
	case ENABLE:
	default:
		DACB.CTRLA = DACB.CTRLA | B8(00000100); //DAC output to pin PB2
     3ec:	e0 e2       	ldi	r30, 0x20	; 32
     3ee:	f3 e0       	ldi	r31, 0x03	; 3
     3f0:	80 81       	ld	r24, Z
     3f2:	84 60       	ori	r24, 0x04	; 4
     3f4:	80 83       	st	Z, r24
     3f6:	08 95       	ret

000003f8 <dac_out0>:
//## DACs
//#############################################################

//DAC's are 12 bit valued -- numbers outside this range will overflow silently
uint16_t dac_out0(uint16_t value){
	DACB.CH0DATA = value; 
     3f8:	e0 e2       	ldi	r30, 0x20	; 32
     3fa:	f3 e0       	ldi	r31, 0x03	; 3
     3fc:	80 8f       	std	Z+24, r24	; 0x18
     3fe:	91 8f       	std	Z+25, r25	; 0x19
	return DACB.CH0DATA;
     400:	80 8d       	ldd	r24, Z+24	; 0x18
     402:	91 8d       	ldd	r25, Z+25	; 0x19
}	
     404:	08 95       	ret

00000406 <dac_out1>:
uint16_t dac_out1(uint16_t value){
	DACB.CH1DATA = value;
     406:	e0 e2       	ldi	r30, 0x20	; 32
     408:	f3 e0       	ldi	r31, 0x03	; 3
     40a:	82 8f       	std	Z+26, r24	; 0x1a
     40c:	93 8f       	std	Z+27, r25	; 0x1b
	return DACB.CH1DATA;
     40e:	82 8d       	ldd	r24, Z+26	; 0x1a
     410:	93 8d       	ldd	r25, Z+27	; 0x1b
}	
     412:	08 95       	ret

00000414 <dac_read0>:

uint16_t dac_read0() {return DACB.CH0DATA;}
     414:	e0 e2       	ldi	r30, 0x20	; 32
     416:	f3 e0       	ldi	r31, 0x03	; 3
     418:	80 8d       	ldd	r24, Z+24	; 0x18
     41a:	91 8d       	ldd	r25, Z+25	; 0x19
     41c:	08 95       	ret

0000041e <dac_read1>:
uint16_t dac_read1() {return DACB.CH1DATA;}
     41e:	e0 e2       	ldi	r30, 0x20	; 32
     420:	f3 e0       	ldi	r31, 0x03	; 3
     422:	82 8d       	ldd	r24, Z+26	; 0x1a
     424:	93 8d       	ldd	r25, Z+27	; 0x1b
     426:	08 95       	ret

00000428 <service_dac>:

void service_dac(){	
}
     428:	08 95       	ret

0000042a <main>:
	uint8_t blah;
	uint16_t blah16;
	int8_t updown;

	//[LED's, Button, & Switches]
		init_ui(); //init LED's first so that they are available for debugging
     42a:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <init_ui>

	//[CPU CLOCK]
		//Boot up and configure oscillator
			OSC.XOSCCTRL = B8(00100010); //enable external 32kHz Xtal using low-power (e.g. low-swing) mode
     42e:	e0 e5       	ldi	r30, 0x50	; 80
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	82 e2       	ldi	r24, 0x22	; 34
     434:	82 83       	std	Z+2, r24	; 0x02
			OSC.CTRL = B8(00001011); //enable 32M-RC & External Xtal -- also "enable" 2M-RC since its already running b/c we booted from it and can't actually disable it until we switch sources
     436:	8b e0       	ldi	r24, 0x0B	; 11
     438:	80 83       	st	Z, r24
		//Wait for stability
			led_on(LED_LEFT);
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <led_on>
			//This is actually tricky sequencing because we boot from the 2MHz internal RC so previous write to OSC.CTRL was ineffective at shutting down the 2M-RC so OSC.STATUS will still reflect that it is running
			while(OSC.STATUS != B8(00001011)); //stall for external xtal and 32M-RC stability
     440:	e0 e5       	ldi	r30, 0x50	; 80
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	81 81       	ldd	r24, Z+1	; 0x01
     446:	8b 30       	cpi	r24, 0x0B	; 11
     448:	e9 f7       	brne	.-6      	; 0x444 <main+0x1a>
			led_off(LED_LEFT);
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <led_off>
		//Configure 
			OSC.DFLLCTRL = B8(00000010); //use external xtal for 32M-RC calibration
     450:	e0 e5       	ldi	r30, 0x50	; 80
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	82 e0       	ldi	r24, 0x02	; 2
     456:	86 83       	std	Z+6, r24	; 0x06
			DFLLRC32M.CTRL = B8(00000001); //enable Xtal calibration of internal 32MHz RC oscillator
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	80 93 60 00 	sts	0x0060, r24
		//Switch system clock over to stable RC oscillator
			//Switch to 32M-RC as system clock source and disable the 2M-RC that we booted from.
			//----REQUIRES CONFIGURATION PROTECTION REGISTER 
			CCP = CCP_IOREG_gc; //disable change protection for IO register
     45e:	98 ed       	ldi	r25, 0xD8	; 216
     460:	94 bf       	out	0x34, r25	; 52
			CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     462:	80 93 40 00 	sts	0x0040, r24
			OSC.CTRL = B8(00001010); //re-execute this write -- this will shutdown the 2M-RC since we are no longer running from it.
     466:	8a e0       	ldi	r24, 0x0A	; 10
     468:	80 83       	st	Z, r24
		//Now running live at 32MHz		

	//[UARTs]
		init_uart(&uctrl, BAUD_115200);
     46a:	80 ea       	ldi	r24, 0xA0	; 160
     46c:	9a e0       	ldi	r25, 0x0A	; 10
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	0e 94 60 06 	call	0xcc0	; 0xcc0 <init_uart>
		init_uart_buffer(&uctrl);
     474:	80 ea       	ldi	r24, 0xA0	; 160
     476:	9a e0       	ldi	r25, 0x0A	; 10
     478:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <init_uart_buffer>
		init_uart(&udata, BAUD_115200);
     47c:	80 eb       	ldi	r24, 0xB0	; 176
     47e:	99 e0       	ldi	r25, 0x09	; 9
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	0e 94 60 06 	call	0xcc0	; 0xcc0 <init_uart>

	//[ADC]
		init_adc();
     486:	0e 94 0d 01 	call	0x21a	; 0x21a <init_adc>

	//[DAC]
		//dac0 is background level
		//dac1 is threshold level
		init_dac();
     48a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <init_dac>

	//[AC]
		init_ac();
     48e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <init_ac>

	//[PWM] 
		init_pwm(); // and serial trigger
     492:	0e 94 a3 03 	call	0x746	; 0x746 <init_pwm>

	//[Realtime Loop Timer]
		//Use PortC's T/C0
		TCC0.CTRLA = 0x07; //Start the timer; Div1024 operation = 32M/1024 = 31250
     496:	e0 e0       	ldi	r30, 0x00	; 0
     498:	f8 e0       	ldi	r31, 0x08	; 8
     49a:	87 e0       	ldi	r24, 0x07	; 7
     49c:	80 83       	st	Z, r24
		//TCC0.PER = 31; //992uS per timer period
		TCC0.PER = 61;
     49e:	8d e3       	ldi	r24, 0x3D	; 61
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	86 a3       	lds	r24, 0x56
     4a4:	97 a3       	lds	r25, 0x57

	//[PMIC (Interrupt Controller)]
		PMIC.CTRL = B8(10000111); //enable all three interrupt levels (lowest one with round-robin)
     4a6:	87 e8       	ldi	r24, 0x87	; 135
     4a8:	e0 ea       	ldi	r30, 0xA0	; 160
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	82 83       	std	Z+2, r24	; 0x02
		sei(); //ENABLE INTERRUPTS AND GO LIVE!
     4ae:	78 94       	sei

	//[RTOS START!]	
		blah = 1;
		blah16 = 0;
		updown = 1;
		led_off(LED_LEFT);
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <led_off>
		led_off(LED_MID);
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <led_off>

		while(1){
			led_dim(LED_LEFT, blah);
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	61 e0       	ldi	r22, 0x01	; 1
     4c0:	0e 94 77 0d 	call	0x1aee	; 0x1aee <led_dim>
			
			blah += updown;			
     4c4:	12 e0       	ldi	r17, 0x02	; 2
		sei(); //ENABLE INTERRUPTS AND GO LIVE!

	//[RTOS START!]	
		blah = 1;
		blah16 = 0;
		updown = 1;
     4c6:	01 e0       	ldi	r16, 0x01	; 1
					STATE_Autolevel = AUTOLEVEL_DIODE;
					led_on(LED_MID);
				}
				else{
					//AUDIO mode
					STATE_Autolevel = AUTOLEVEL_AUDIO;
     4c8:	66 24       	eor	r6, r6
     4ca:	68 94       	set
     4cc:	61 f8       	bld	r6, 1
				//Now add some margin to the level for stability
				dac_out0(dac_read0()+600);
				STATE_Autolevel = AUTOLEVEL_DONE;
				break;
			case AUTOLEVEL_WAIT:
				STATE_Autolevel = AUTOLEVEL_WAIT2;
     4ce:	99 24       	eor	r9, r9
     4d0:	68 94       	set
     4d2:	92 f8       	bld	r9, 2
			case AUTOLEVEL_DIODE:
				//Determine background level
					adc_ch1_stats(1024);
				//Set background level
					dac_out0((adc_avg*5)/8 + 170); //background (x*0.625 = x*5/8)
				STATE_Autolevel = AUTOLEVEL_WAIT;
     4d4:	0f 2e       	mov	r0, r31
     4d6:	f3 e0       	ldi	r31, 0x03	; 3
     4d8:	8f 2e       	mov	r8, r31
     4da:	f0 2d       	mov	r31, r0
				//Decrease DAC until signal is saturated high		
				adc_avg = 0;						
				while(adc_avg < AUDIO_THRESHOLD_TOP){
					adc_ch1_stats(32);
					if(adc_avg <= AUDIO_THRESHOLD_TOP) {
						if(dac_read0() == 0) adc_avg = AUDIO_THRESHOLD_TOP; //safety condition -- can't reach loop exit condition, so lets just exit and hope for the best!
     4dc:	0f 2e       	mov	r0, r31
     4de:	fe ee       	ldi	r31, 0xEE	; 238
     4e0:	ef 2e       	mov	r14, r31
     4e2:	fe ee       	ldi	r31, 0xEE	; 238
     4e4:	ff 2e       	mov	r15, r31
     4e6:	f0 2d       	mov	r31, r0
						if(dac_read0() >= 100) {dac_out0(dac_read0()-100);}
						else {dac_out0(0);}	
					}						
				}				
				//Increase DAC until signal is saturated low
				adc_avg = 0xFFFF;
     4e8:	cc 24       	eor	r12, r12
     4ea:	ca 94       	dec	r12
     4ec:	dc 2c       	mov	r13, r12
				while(adc_avg > AUDIO_THRESHOLD_BOTTOM){
					adc_ch1_stats(32);
					if(adc_avg >= AUDIO_THRESHOLD_BOTTOM) {
						if(dac_read0() == 0x0FFF) adc_avg = AUDIO_THRESHOLD_BOTTOM; //safety condition -- can't reach loop exit condition, so lets just exit and hope for the best!
     4ee:	aa 24       	eor	r10, r10
     4f0:	bb 24       	eor	r11, r11
     4f2:	68 94       	set
     4f4:	b0 f8       	bld	r11, 0
						else {dac_out0(0x0FFF);}
					}
				}		
				//Now add some margin to the level for stability
				dac_out0(dac_read0()+600);
				STATE_Autolevel = AUTOLEVEL_DONE;
     4f6:	0f 2e       	mov	r0, r31
     4f8:	f5 e0       	ldi	r31, 0x05	; 5
     4fa:	7f 2e       	mov	r7, r31
     4fc:	f0 2d       	mov	r31, r0
			case AUTOLEVEL_IDLE:
			default:		
				break;
			}
					
			while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
     4fe:	c0 e0       	ldi	r28, 0x00	; 0
     500:	d8 e0       	ldi	r29, 0x08	; 8
     502:	01 c0       	rjmp	.+2      	; 0x506 <main+0xdc>
		while(1){
			led_dim(LED_LEFT, blah);
			
			blah += updown;			
			if ((blah == 255) || (blah == 0)) {
				updown = -1 * updown;
     504:	01 95       	neg	r16
			}
			
			blah16++;
			
			service_pwm();
     506:	0e 94 b2 05 	call	0xb64	; 0xb64 <service_pwm>
			service_switches();
     50a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <service_switches>
			service_leds();
     50e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <service_leds>
			service_button();
     512:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <service_button>
			service_uart_buffer();
     516:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <service_uart_buffer>
			
			if (STATE_Button == BUTTON_PUSHED){
     51a:	80 91 15 20 	lds	r24, 0x2015
     51e:	81 30       	cpi	r24, 0x01	; 1
     520:	91 f4       	brne	.+36     	; 0x546 <main+0x11c>
				if (pwm_mode() == false){
     522:	0e 94 d6 03 	call	0x7ac	; 0x7ac <pwm_mode>
     526:	88 23       	and	r24, r24
     528:	31 f4       	brne	.+12     	; 0x536 <main+0x10c>
					//DIODE mode
					STATE_Autolevel = AUTOLEVEL_DIODE;
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	80 93 12 20 	sts	0x2012, r24
					led_on(LED_MID);
     530:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <led_on>
     534:	08 c0       	rjmp	.+16     	; 0x546 <main+0x11c>
				}
				else{
					//AUDIO mode
					STATE_Autolevel = AUTOLEVEL_AUDIO;
     536:	60 92 12 20 	sts	0x2012, r6
					dac_output0(ENABLE);
     53a:	8a e2       	ldi	r24, 0x2A	; 42
     53c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <dac_output0>
					led_on(LED_MID);
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <led_on>

			//PERFORM AUTO-LEVELING!
				//adc is 503uV resolution
				//dac is 806uV resolution
				//ergo ADC -> DAC values must be adjusted by: (x*0.625 = x*5/8)
			switch(STATE_Autolevel){
     546:	80 91 12 20 	lds	r24, 0x2012
     54a:	83 30       	cpi	r24, 0x03	; 3
     54c:	09 f4       	brne	.+2      	; 0x550 <main+0x126>
     54e:	99 c0       	rjmp	.+306    	; 0x682 <main+0x258>
     550:	84 30       	cpi	r24, 0x04	; 4
     552:	30 f4       	brcc	.+12     	; 0x560 <main+0x136>
     554:	81 30       	cpi	r24, 0x01	; 1
     556:	59 f0       	breq	.+22     	; 0x56e <main+0x144>
     558:	82 30       	cpi	r24, 0x02	; 2
     55a:	09 f0       	breq	.+2      	; 0x55e <main+0x134>
     55c:	e4 c0       	rjmp	.+456    	; 0x726 <main+0x2fc>
     55e:	23 c0       	rjmp	.+70     	; 0x5a6 <main+0x17c>
     560:	84 30       	cpi	r24, 0x04	; 4
     562:	09 f4       	brne	.+2      	; 0x566 <main+0x13c>
     564:	91 c0       	rjmp	.+290    	; 0x688 <main+0x25e>
     566:	85 30       	cpi	r24, 0x05	; 5
     568:	09 f0       	breq	.+2      	; 0x56c <main+0x142>
     56a:	dd c0       	rjmp	.+442    	; 0x726 <main+0x2fc>
     56c:	d7 c0       	rjmp	.+430    	; 0x71c <main+0x2f2>
			case AUTOLEVEL_DIODE:
				//Determine background level
					adc_ch1_stats(1024);
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	94 e0       	ldi	r25, 0x04	; 4
     572:	0e 94 8c 01 	call	0x318	; 0x318 <adc_ch1_stats>
				//Set background level
					dac_out0((adc_avg*5)/8 + 170); //background (x*0.625 = x*5/8)
     576:	80 91 17 20 	lds	r24, 0x2017
     57a:	90 91 18 20 	lds	r25, 0x2018
     57e:	9c 01       	movw	r18, r24
     580:	22 0f       	add	r18, r18
     582:	33 1f       	adc	r19, r19
     584:	22 0f       	add	r18, r18
     586:	33 1f       	adc	r19, r19
     588:	82 0f       	add	r24, r18
     58a:	93 1f       	adc	r25, r19
     58c:	96 95       	lsr	r25
     58e:	87 95       	ror	r24
     590:	96 95       	lsr	r25
     592:	87 95       	ror	r24
     594:	96 95       	lsr	r25
     596:	87 95       	ror	r24
     598:	86 55       	subi	r24, 0x56	; 86
     59a:	9f 4f       	sbci	r25, 0xFF	; 255
     59c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <dac_out0>
				STATE_Autolevel = AUTOLEVEL_WAIT;
     5a0:	80 92 12 20 	sts	0x2012, r8
				break;
     5a4:	c0 c0       	rjmp	.+384    	; 0x726 <main+0x2fc>
			case AUTOLEVEL_AUDIO:
				//We can't observe the signal directly so we need to hunt for the presumed DC level by...
				//Decrease DAC until signal is saturated high		
				adc_avg = 0;						
     5a6:	10 92 17 20 	sts	0x2017, r1
     5aa:	10 92 18 20 	sts	0x2018, r1
				while(adc_avg < AUDIO_THRESHOLD_TOP){
     5ae:	24 c0       	rjmp	.+72     	; 0x5f8 <main+0x1ce>
					adc_ch1_stats(32);
     5b0:	80 e2       	ldi	r24, 0x20	; 32
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 8c 01 	call	0x318	; 0x318 <adc_ch1_stats>
					if(adc_avg <= AUDIO_THRESHOLD_TOP) {
     5b8:	80 91 17 20 	lds	r24, 0x2017
     5bc:	90 91 18 20 	lds	r25, 0x2018
     5c0:	2e ee       	ldi	r18, 0xEE	; 238
     5c2:	8f 3e       	cpi	r24, 0xEF	; 239
     5c4:	92 07       	cpc	r25, r18
     5c6:	c0 f4       	brcc	.+48     	; 0x5f8 <main+0x1ce>
						if(dac_read0() == 0) adc_avg = AUDIO_THRESHOLD_TOP; //safety condition -- can't reach loop exit condition, so lets just exit and hope for the best!
     5c8:	0e 94 0a 02 	call	0x414	; 0x414 <dac_read0>
     5cc:	00 97       	sbiw	r24, 0x00	; 0
     5ce:	21 f4       	brne	.+8      	; 0x5d8 <main+0x1ae>
     5d0:	e0 92 17 20 	sts	0x2017, r14
     5d4:	f0 92 18 20 	sts	0x2018, r15
						if(dac_read0() >= 100) {dac_out0(dac_read0()-100);}
     5d8:	0e 94 0a 02 	call	0x414	; 0x414 <dac_read0>
     5dc:	84 36       	cpi	r24, 0x64	; 100
     5de:	91 05       	cpc	r25, r1
     5e0:	38 f0       	brcs	.+14     	; 0x5f0 <main+0x1c6>
     5e2:	0e 94 0a 02 	call	0x414	; 0x414 <dac_read0>
     5e6:	84 56       	subi	r24, 0x64	; 100
     5e8:	90 40       	sbci	r25, 0x00	; 0
     5ea:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <dac_out0>
     5ee:	04 c0       	rjmp	.+8      	; 0x5f8 <main+0x1ce>
						else {dac_out0(0);}	
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <dac_out0>
				break;
			case AUTOLEVEL_AUDIO:
				//We can't observe the signal directly so we need to hunt for the presumed DC level by...
				//Decrease DAC until signal is saturated high		
				adc_avg = 0;						
				while(adc_avg < AUDIO_THRESHOLD_TOP){
     5f8:	80 91 17 20 	lds	r24, 0x2017
     5fc:	90 91 18 20 	lds	r25, 0x2018
     600:	2e ee       	ldi	r18, 0xEE	; 238
     602:	8e 3e       	cpi	r24, 0xEE	; 238
     604:	92 07       	cpc	r25, r18
     606:	a0 f2       	brcs	.-88     	; 0x5b0 <main+0x186>
						if(dac_read0() >= 100) {dac_out0(dac_read0()-100);}
						else {dac_out0(0);}	
					}						
				}				
				//Increase DAC until signal is saturated low
				adc_avg = 0xFFFF;
     608:	c0 92 17 20 	sts	0x2017, r12
     60c:	d0 92 18 20 	sts	0x2018, r13
				while(adc_avg > AUDIO_THRESHOLD_BOTTOM){
     610:	27 c0       	rjmp	.+78     	; 0x660 <main+0x236>
					adc_ch1_stats(32);
     612:	80 e2       	ldi	r24, 0x20	; 32
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 8c 01 	call	0x318	; 0x318 <adc_ch1_stats>
					if(adc_avg >= AUDIO_THRESHOLD_BOTTOM) {
     61a:	80 91 17 20 	lds	r24, 0x2017
     61e:	90 91 18 20 	lds	r25, 0x2018
     622:	8f 3f       	cpi	r24, 0xFF	; 255
     624:	91 05       	cpc	r25, r1
     626:	e1 f0       	breq	.+56     	; 0x660 <main+0x236>
     628:	d8 f0       	brcs	.+54     	; 0x660 <main+0x236>
						if(dac_read0() == 0x0FFF) adc_avg = AUDIO_THRESHOLD_BOTTOM; //safety condition -- can't reach loop exit condition, so lets just exit and hope for the best!
     62a:	0e 94 0a 02 	call	0x414	; 0x414 <dac_read0>
     62e:	2f e0       	ldi	r18, 0x0F	; 15
     630:	8f 3f       	cpi	r24, 0xFF	; 255
     632:	92 07       	cpc	r25, r18
     634:	21 f4       	brne	.+8      	; 0x63e <main+0x214>
     636:	a0 92 17 20 	sts	0x2017, r10
     63a:	b0 92 18 20 	sts	0x2018, r11
						if(dac_read0() < 0x0FFF) {dac_out0(dac_read0()+100);}
     63e:	0e 94 0a 02 	call	0x414	; 0x414 <dac_read0>
     642:	2f e0       	ldi	r18, 0x0F	; 15
     644:	8f 3f       	cpi	r24, 0xFF	; 255
     646:	92 07       	cpc	r25, r18
     648:	38 f4       	brcc	.+14     	; 0x658 <main+0x22e>
     64a:	0e 94 0a 02 	call	0x414	; 0x414 <dac_read0>
     64e:	8c 59       	subi	r24, 0x9C	; 156
     650:	9f 4f       	sbci	r25, 0xFF	; 255
     652:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <dac_out0>
     656:	04 c0       	rjmp	.+8      	; 0x660 <main+0x236>
						else {dac_out0(0x0FFF);}
     658:	8f ef       	ldi	r24, 0xFF	; 255
     65a:	9f e0       	ldi	r25, 0x0F	; 15
     65c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <dac_out0>
						else {dac_out0(0);}	
					}						
				}				
				//Increase DAC until signal is saturated low
				adc_avg = 0xFFFF;
				while(adc_avg > AUDIO_THRESHOLD_BOTTOM){
     660:	80 91 17 20 	lds	r24, 0x2017
     664:	90 91 18 20 	lds	r25, 0x2018
     668:	21 e0       	ldi	r18, 0x01	; 1
     66a:	81 30       	cpi	r24, 0x01	; 1
     66c:	92 07       	cpc	r25, r18
     66e:	88 f6       	brcc	.-94     	; 0x612 <main+0x1e8>
						if(dac_read0() < 0x0FFF) {dac_out0(dac_read0()+100);}
						else {dac_out0(0x0FFF);}
					}
				}		
				//Now add some margin to the level for stability
				dac_out0(dac_read0()+600);
     670:	0e 94 0a 02 	call	0x414	; 0x414 <dac_read0>
     674:	88 5a       	subi	r24, 0xA8	; 168
     676:	9d 4f       	sbci	r25, 0xFD	; 253
     678:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <dac_out0>
				STATE_Autolevel = AUTOLEVEL_DONE;
     67c:	70 92 12 20 	sts	0x2012, r7
				break;
     680:	52 c0       	rjmp	.+164    	; 0x726 <main+0x2fc>
			case AUTOLEVEL_WAIT:
				STATE_Autolevel = AUTOLEVEL_WAIT2;
     682:	90 92 12 20 	sts	0x2012, r9
				break;
     686:	4f c0       	rjmp	.+158    	; 0x726 <main+0x2fc>
			case AUTOLEVEL_WAIT2:
				//Measure resulting amplified level		
					adc_ch0_stats(1024);
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	94 e0       	ldi	r25, 0x04	; 4
     68c:	0e 94 34 01 	call	0x268	; 0x268 <adc_ch0_stats>
				//Set threshold!
					dac_out1((adc_max*5)/8 + 512); //threshold
     690:	80 91 19 20 	lds	r24, 0x2019
     694:	90 91 1a 20 	lds	r25, 0x201A
     698:	9c 01       	movw	r18, r24
     69a:	22 0f       	add	r18, r18
     69c:	33 1f       	adc	r19, r19
     69e:	22 0f       	add	r18, r18
     6a0:	33 1f       	adc	r19, r19
     6a2:	82 0f       	add	r24, r18
     6a4:	93 1f       	adc	r25, r19
     6a6:	96 95       	lsr	r25
     6a8:	87 95       	ror	r24
     6aa:	96 95       	lsr	r25
     6ac:	87 95       	ror	r24
     6ae:	96 95       	lsr	r25
     6b0:	87 95       	ror	r24
     6b2:	80 50       	subi	r24, 0x00	; 0
     6b4:	9e 4f       	sbci	r25, 0xFE	; 254
     6b6:	0e 94 03 02 	call	0x406	; 0x406 <dac_out1>
					uart_send_byte(&uctrl, ' ');
     6ba:	80 ea       	ldi	r24, 0xA0	; 160
     6bc:	9a e0       	ldi	r25, 0x0A	; 10
     6be:	60 e2       	ldi	r22, 0x20	; 32
     6c0:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
					uart_send_byte(&uctrl, '+');
     6c4:	80 ea       	ldi	r24, 0xA0	; 160
     6c6:	9a e0       	ldi	r25, 0x0A	; 10
     6c8:	6b e2       	ldi	r22, 0x2B	; 43
     6ca:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
					uart_send_HEX16(&uctrl, adc_max*5/8);
     6ce:	60 91 19 20 	lds	r22, 0x2019
     6d2:	70 91 1a 20 	lds	r23, 0x201A
     6d6:	cb 01       	movw	r24, r22
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	68 0f       	add	r22, r24
     6e2:	79 1f       	adc	r23, r25
     6e4:	76 95       	lsr	r23
     6e6:	67 95       	ror	r22
     6e8:	76 95       	lsr	r23
     6ea:	67 95       	ror	r22
     6ec:	76 95       	lsr	r23
     6ee:	67 95       	ror	r22
     6f0:	80 ea       	ldi	r24, 0xA0	; 160
     6f2:	9a e0       	ldi	r25, 0x0A	; 10
     6f4:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_send_HEX16>
					uart_send_byte(&uctrl, '.');
     6f8:	80 ea       	ldi	r24, 0xA0	; 160
     6fa:	9a e0       	ldi	r25, 0x0A	; 10
     6fc:	6e e2       	ldi	r22, 0x2E	; 46
     6fe:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
					uart_send_HEX16(&uctrl, adc_max);
     702:	60 91 19 20 	lds	r22, 0x2019
     706:	70 91 1a 20 	lds	r23, 0x201A
     70a:	80 ea       	ldi	r24, 0xA0	; 160
     70c:	9a e0       	ldi	r25, 0x0A	; 10
     70e:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_send_HEX16>
					uart_send_byte(&uctrl, ' ');
     712:	80 ea       	ldi	r24, 0xA0	; 160
     714:	9a e0       	ldi	r25, 0x0A	; 10
     716:	60 e2       	ldi	r22, 0x20	; 32
     718:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
				//Done! -- just fall through					
			case AUTOLEVEL_DONE:
				led_off(LED_MID);
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <led_off>
				STATE_Autolevel = AUTOLEVEL_IDLE;
     722:	10 92 12 20 	sts	0x2012, r1
			case AUTOLEVEL_IDLE:
			default:		
				break;
			}
					
			while((TCC0.INTFLAGS & _BV(0)) != 0x01); //Wait for the loop time to expire
     726:	8c 85       	ldd	r24, Y+12	; 0x0c
     728:	80 ff       	sbrs	r24, 0
     72a:	fd cf       	rjmp	.-6      	; 0x726 <main+0x2fc>
			TCC0.INTFLAGS = 0x01; //Clear the interrupt flag
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	8c 87       	std	Y+12, r24	; 0x0c
		updown = 1;
		led_off(LED_LEFT);
		led_off(LED_MID);

		while(1){
			led_dim(LED_LEFT, blah);
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	61 2f       	mov	r22, r17
     734:	0e 94 77 0d 	call	0x1aee	; 0x1aee <led_dim>
			
			blah += updown;			
     738:	10 0f       	add	r17, r16
			if ((blah == 255) || (blah == 0)) {
     73a:	81 2f       	mov	r24, r17
     73c:	81 50       	subi	r24, 0x01	; 1
     73e:	8e 3f       	cpi	r24, 0xFE	; 254
     740:	08 f0       	brcs	.+2      	; 0x744 <main+0x31a>
     742:	e0 ce       	rjmp	.-576    	; 0x504 <main+0xda>
     744:	e0 ce       	rjmp	.-576    	; 0x506 <main+0xdc>

00000746 <init_pwm>:

//Initialize the PWM module
void init_pwm(){
	//no init needed for pwm functions. We initialize when the mode is activated.
	//but triggering does
	trigger_target = TRIGGER_TARGET;
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e2       	ldi	r25, 0x20	; 32
     74a:	80 93 22 22 	sts	0x2222, r24
     74e:	90 93 23 22 	sts	0x2223, r25
}
     752:	08 95       	ret

00000754 <pwm_enable>:

void pwm_enable(){
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
	//TIMER (PORTD.TC0)
		TCE0.CTRLA = B8(00000101); //Timer Clock source is 32MHz/64; ~130ms Range @ 2uS resolution
     758:	e0 e0       	ldi	r30, 0x00	; 0
     75a:	fa e0       	ldi	r31, 0x0A	; 10
     75c:	85 e0       	ldi	r24, 0x05	; 5
     75e:	80 83       	st	Z, r24
		TCE0.CTRLB = 0x00; //Turn off output pins (for both input capture and waveform generation)
     760:	11 82       	std	Z+1, r1	; 0x01
		TCE0.CTRLC = 0x00; //Only for the compare output unit
     762:	12 82       	std	Z+2, r1	; 0x02
		TCE0.CTRLD = B8(00000000); //Disable Event Unit
     764:	13 82       	std	Z+3, r1	; 0x03
		TCE0.CTRLE = 0x00; //Leave the counter in 16 (rather than 8) bit mode
     766:	14 82       	std	Z+4, r1	; 0x04

	//DIGITAL-TO-ANALOG CONVERTER (DAC)
		//PORTB.DAC0 -- Vbackground; value set by calibration routine;
		dac_output0(ENABLE);
     768:	8a e2       	ldi	r24, 0x2A	; 42
     76a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <dac_output0>
		dac_out1(2000); //about mid scale
     76e:	80 ed       	ldi	r24, 0xD0	; 208
     770:	97 e0       	ldi	r25, 0x07	; 7
     772:	0e 94 03 02 	call	0x406	; 0x406 <dac_out1>
		
	//ANALOG COMPARATOR
		ACA.AC0MUXCTRL = B8(00000011); //Pos. input = PA0; Neg. Input = PA5 (DAC1); 
     776:	c0 e8       	ldi	r28, 0x80	; 128
     778:	d3 e0       	ldi	r29, 0x03	; 3
     77a:	83 e0       	ldi	r24, 0x03	; 3
     77c:	8a 83       	std	Y+2, r24	; 0x02
		//ACA.CTRLB = 20; //VCC Scaler = VCC/2 = 1.65V
		ac_output(DISABLE); //Turn off PA7 output pin (we'll use it directly to control the external peripheral)
     77e:	89 e2       	ldi	r24, 0x29	; 41
     780:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ac_output>
		ACA.AC0CTRL = B8(00111101); //enable AC0; 50mV hysterysis; high priority interrupt on edge toggle; high-speed mode
     784:	8d e3       	ldi	r24, 0x3D	; 61
     786:	88 83       	st	Y, r24
		PORTA.OUTCLR = B8(10000000); //PA7 output low
     788:	e0 e0       	ldi	r30, 0x00	; 0
     78a:	f6 e0       	ldi	r31, 0x06	; 6
     78c:	80 e8       	ldi	r24, 0x80	; 128
     78e:	86 83       	std	Z+6, r24	; 0x06
		PORTA.DIRSET = B8(10000000); //Set PA7 as output (should be anyway)
     790:	81 83       	std	Z+1, r24	; 0x01

	//BUTTON
		STATE_Autolevel = AUTOLEVEL_IDLE;
     792:	10 92 12 20 	sts	0x2012, r1
}
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <pwm_disable>:

void pwm_disable(){
	//TIMER (PORTD.TC0)
		TCE0.CTRLA = 0x00; //Disable Timer
     79c:	10 92 00 0a 	sts	0x0A00, r1

	//DIGITAL-TO-ANALOG CONVERTER (DAC)
		//PORTB.DAC0 -- Vbackground; Enable to allow DAC operation
		dac_output0(DISABLE);
     7a0:	89 e2       	ldi	r24, 0x29	; 41
     7a2:	0e 94 ee 01 	call	0x3dc	; 0x3dc <dac_output0>

	//ANALOG COMPARATOR
		init_ac();
     7a6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <init_ac>
}
     7aa:	08 95       	ret

000007ac <pwm_mode>:

//Returns 'true' if the user configuration switch is set to Audio/PWM mode
boolean pwm_mode(){
	return sw_on(SW1);
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <sw_on>
}
     7b2:	08 95       	ret

000007b4 <pwm_polarity>:
		pwm_decode(width);
	}
}

void pwm_polarity(uint8_t polarity){
	STATE_Pwm_Polarity = polarity;
     7b4:	80 93 10 20 	sts	0x2010, r24
}
     7b8:	08 95       	ret

000007ba <pwm_timer_reset>:
//#############################################################
//## TIMER CAPTURE FUNCTIONS
//#############################################################
void pwm_timer_reset(void){
	//Reset the timer effective immediately!
	TCE0.CNTL = 0x00;
     7ba:	e0 e0       	ldi	r30, 0x00	; 0
     7bc:	fa e0       	ldi	r31, 0x0A	; 10
     7be:	10 a2       	lds	r17, 0x90
	TCE0.CNTH = 0x00;	
     7c0:	11 a2       	lds	r17, 0x91
	//Clear the overflow flag (actually, clears all flags, but OVIF is the only one we use)
	TCE0.INTFLAGS = 0xFF; 
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	84 87       	std	Z+12, r24	; 0x0c
}
     7c6:	08 95       	ret

000007c8 <edge_start>:
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_start();
	}
}

void inline edge_start(){
	pwm_timer_reset();
     7c8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <pwm_timer_reset>
}
     7cc:	08 95       	ret

000007ce <between>:
	TCE0.CNTH = 0x00;	
	//Clear the overflow flag (actually, clears all flags, but OVIF is the only one we use)
	TCE0.INTFLAGS = 0xFF; 
}

boolean between(uint16_t var, uint16_t low, uint16_t high){
     7ce:	9c 01       	movw	r18, r24
	if ((var > low) && (var < high)) return true;
     7d0:	68 17       	cp	r22, r24
     7d2:	79 07       	cpc	r23, r25
     7d4:	30 f4       	brcc	.+12     	; 0x7e2 <between+0x14>
	TCE0.CNTH = 0x00;	
	//Clear the overflow flag (actually, clears all flags, but OVIF is the only one we use)
	TCE0.INTFLAGS = 0xFF; 
}

boolean between(uint16_t var, uint16_t low, uint16_t high){
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	24 17       	cp	r18, r20
     7da:	35 07       	cpc	r19, r21
     7dc:	18 f0       	brcs	.+6      	; 0x7e4 <between+0x16>
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	08 95       	ret
	if ((var > low) && (var < high)) return true;
	else return false;
     7e2:	80 e0       	ldi	r24, 0x00	; 0
}
     7e4:	08 95       	ret

000007e6 <pwm_out_high>:
		pwm_state('D');
	}
}

void pwm_out_high(void){
	STATE_Pwm = PWM_OUTPUT_HIGH; //A = Turn On Constantly
     7e6:	8f e4       	ldi	r24, 0x4F	; 79
     7e8:	80 93 11 20 	sts	0x2011, r24
	uart_enqueue(' ');
     7ec:	80 e2       	ldi	r24, 0x20	; 32
     7ee:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('<');
     7f2:	8c e3       	ldi	r24, 0x3C	; 60
     7f4:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('-');
     7f8:	8d e2       	ldi	r24, 0x2D	; 45
     7fa:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('O');
     7fe:	8f e4       	ldi	r24, 0x4F	; 79
     800:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('N');
     804:	8e e4       	ldi	r24, 0x4E	; 78
     806:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
}
     80a:	08 95       	ret

0000080c <pwm_out_low>:
void pwm_out_low(void){
	STATE_Pwm = PWM_OUTPUT_LOW; //B = Turn Off Constantly
     80c:	8e e4       	ldi	r24, 0x4E	; 78
     80e:	80 93 11 20 	sts	0x2011, r24
	uart_enqueue(' ');
     812:	80 e2       	ldi	r24, 0x20	; 32
     814:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('<');
     818:	8c e3       	ldi	r24, 0x3C	; 60
     81a:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('-');
     81e:	8d e2       	ldi	r24, 0x2D	; 45
     820:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('O');
     824:	8f e4       	ldi	r24, 0x4F	; 79
     826:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('F');
     82a:	86 e4       	ldi	r24, 0x46	; 70
     82c:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('F');
     830:	86 e4       	ldi	r24, 0x46	; 70
     832:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
}
     836:	08 95       	ret

00000838 <pwm_pulse>:

//Code to initiate an output pulse. Output pulses are only initiated if there is not a current pulse in progress
void pwm_pulse(void){	
	if (STATE_Pwm != PWM_OUTPUT_PULSE){
     838:	80 91 11 20 	lds	r24, 0x2011
     83c:	80 35       	cpi	r24, 0x50	; 80
     83e:	31 f0       	breq	.+12     	; 0x84c <pwm_pulse+0x14>
		STATE_Pwm = PWM_OUTPUT_PULSE; //Update state
     840:	80 e5       	ldi	r24, 0x50	; 80
     842:	80 93 11 20 	sts	0x2011, r24
		STATE_Pwm_Counter = PWM_PULSE_DURATION; //Load the counter
     846:	84 e1       	ldi	r24, 0x14	; 20
     848:	80 93 13 20 	sts	0x2013, r24
	}	
	uart_enqueue(' ');
     84c:	80 e2       	ldi	r24, 0x20	; 32
     84e:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('<');
     852:	8c e3       	ldi	r24, 0x3C	; 60
     854:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('-');
     858:	8d e2       	ldi	r24, 0x2D	; 45
     85a:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('P');
     85e:	80 e5       	ldi	r24, 0x50	; 80
     860:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('U');
     864:	85 e5       	ldi	r24, 0x55	; 85
     866:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('L');
     86a:	8c e4       	ldi	r24, 0x4C	; 76
     86c:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('S');
     870:	83 e5       	ldi	r24, 0x53	; 83
     872:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('E');
     876:	85 e4       	ldi	r24, 0x45	; 69
     878:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
}
     87c:	08 95       	ret

0000087e <pwm_reserved>:

void pwm_reserved(void){
	uart_enqueue(' ');
     87e:	80 e2       	ldi	r24, 0x20	; 32
     880:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('<');
     884:	8c e3       	ldi	r24, 0x3C	; 60
     886:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('-');
     88a:	8d e2       	ldi	r24, 0x2D	; 45
     88c:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('W');
     890:	87 e5       	ldi	r24, 0x57	; 87
     892:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('T');
     896:	84 e5       	ldi	r24, 0x54	; 84
     898:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('F');
     89c:	86 e4       	ldi	r24, 0x46	; 70
     89e:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enqueue('!');
     8a2:	81 e2       	ldi	r24, 0x21	; 33
     8a4:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
}
     8a8:	08 95       	ret

000008aa <pwm_change_state>:

void pwm_change_state(uint8_t new_state){
	STATE_Pwm_Decode = new_state;
     8aa:	80 93 0f 20 	sts	0x200F, r24
	STATE_Pwm_Timeout = TIMEOUT;		
     8ae:	82 e3       	ldi	r24, 0x32	; 50
     8b0:	80 93 0e 20 	sts	0x200E, r24
}
     8b4:	08 95       	ret

000008b6 <pwm_state>:

//State machine to decode more advanced command format
void pwm_state(uint8_t next_code){
	switch (STATE_Pwm_Decode){
     8b6:	90 91 0f 20 	lds	r25, 0x200F
     8ba:	95 38       	cpi	r25, 0x85	; 133
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <pwm_state+0xa>
     8be:	42 c0       	rjmp	.+132    	; 0x944 <pwm_state+0x8e>
     8c0:	96 38       	cpi	r25, 0x86	; 134
     8c2:	40 f4       	brcc	.+16     	; 0x8d4 <pwm_state+0x1e>
     8c4:	93 38       	cpi	r25, 0x83	; 131
     8c6:	d1 f0       	breq	.+52     	; 0x8fc <pwm_state+0x46>
     8c8:	94 38       	cpi	r25, 0x84	; 132
     8ca:	58 f5       	brcc	.+86     	; 0x922 <pwm_state+0x6c>
     8cc:	92 38       	cpi	r25, 0x82	; 130
     8ce:	09 f0       	breq	.+2      	; 0x8d2 <pwm_state+0x1c>
     8d0:	5a c0       	rjmp	.+180    	; 0x986 <pwm_state+0xd0>
     8d2:	0d c0       	rjmp	.+26     	; 0x8ee <pwm_state+0x38>
     8d4:	97 38       	cpi	r25, 0x87	; 135
     8d6:	09 f4       	brne	.+2      	; 0x8da <pwm_state+0x24>
     8d8:	4a c0       	rjmp	.+148    	; 0x96e <pwm_state+0xb8>
     8da:	97 38       	cpi	r25, 0x87	; 135
     8dc:	08 f4       	brcc	.+2      	; 0x8e0 <pwm_state+0x2a>
     8de:	43 c0       	rjmp	.+134    	; 0x966 <pwm_state+0xb0>
     8e0:	98 38       	cpi	r25, 0x88	; 136
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <pwm_state+0x30>
     8e4:	48 c0       	rjmp	.+144    	; 0x976 <pwm_state+0xc0>
     8e6:	99 38       	cpi	r25, 0x89	; 137
     8e8:	09 f0       	breq	.+2      	; 0x8ec <pwm_state+0x36>
     8ea:	4d c0       	rjmp	.+154    	; 0x986 <pwm_state+0xd0>
     8ec:	48 c0       	rjmp	.+144    	; 0x97e <pwm_state+0xc8>
		case LOOK_FOR_START:
			if (next_code == 'A') pwm_change_state(SAW_A);
     8ee:	81 34       	cpi	r24, 0x41	; 65
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <pwm_state+0x3e>
     8f2:	4c c0       	rjmp	.+152    	; 0x98c <pwm_state+0xd6>
     8f4:	83 e8       	ldi	r24, 0x83	; 131
     8f6:	0e 94 55 04 	call	0x8aa	; 0x8aa <pwm_change_state>
     8fa:	08 95       	ret
			break;
		case SAW_A:
			switch (next_code){
     8fc:	82 34       	cpi	r24, 0x42	; 66
     8fe:	29 f0       	breq	.+10     	; 0x90a <pwm_state+0x54>
     900:	83 34       	cpi	r24, 0x43	; 67
     902:	39 f0       	breq	.+14     	; 0x912 <pwm_state+0x5c>
     904:	81 34       	cpi	r24, 0x41	; 65
     906:	49 f4       	brne	.+18     	; 0x91a <pwm_state+0x64>
     908:	08 95       	ret
				case 'A':
				break;
				case 'B':
				pwm_change_state(SAW_AB); break;
     90a:	84 e8       	ldi	r24, 0x84	; 132
     90c:	0e 94 55 04 	call	0x8aa	; 0x8aa <pwm_change_state>
     910:	08 95       	ret
				case 'C':
				pwm_change_state(SAW_AC); break;
     912:	85 e8       	ldi	r24, 0x85	; 133
     914:	0e 94 55 04 	call	0x8aa	; 0x8aa <pwm_change_state>
     918:	08 95       	ret
				default:
				pwm_change_state(LOOK_FOR_START);
     91a:	82 e8       	ldi	r24, 0x82	; 130
     91c:	0e 94 55 04 	call	0x8aa	; 0x8aa <pwm_change_state>
     920:	08 95       	ret
			}		
			break;	
		case SAW_AB:
			switch (next_code){
     922:	82 34       	cpi	r24, 0x42	; 66
     924:	19 f0       	breq	.+6      	; 0x92c <pwm_state+0x76>
     926:	83 34       	cpi	r24, 0x43	; 67
     928:	49 f4       	brne	.+18     	; 0x93c <pwm_state+0x86>
     92a:	04 c0       	rjmp	.+8      	; 0x934 <pwm_state+0x7e>
				case 'B':
					pwm_change_state(SAW_ABB); break;
     92c:	86 e8       	ldi	r24, 0x86	; 134
     92e:	0e 94 55 04 	call	0x8aa	; 0x8aa <pwm_change_state>
     932:	08 95       	ret
				case 'C':
					pwm_change_state(SAW_ABC); break;
     934:	87 e8       	ldi	r24, 0x87	; 135
     936:	0e 94 55 04 	call	0x8aa	; 0x8aa <pwm_change_state>
     93a:	08 95       	ret
				default:
					pwm_change_state(LOOK_FOR_START);
     93c:	82 e8       	ldi	r24, 0x82	; 130
     93e:	0e 94 55 04 	call	0x8aa	; 0x8aa <pwm_change_state>
     942:	08 95       	ret
			}
			break;
		case SAW_AC:
			switch (next_code){
     944:	82 34       	cpi	r24, 0x42	; 66
     946:	19 f0       	breq	.+6      	; 0x94e <pwm_state+0x98>
     948:	83 34       	cpi	r24, 0x43	; 67
     94a:	49 f4       	brne	.+18     	; 0x95e <pwm_state+0xa8>
     94c:	04 c0       	rjmp	.+8      	; 0x956 <pwm_state+0xa0>
				case 'B':
					pwm_change_state(SAW_ACB); break;
     94e:	88 e8       	ldi	r24, 0x88	; 136
     950:	0e 94 55 04 	call	0x8aa	; 0x8aa <pwm_change_state>
     954:	08 95       	ret
				case 'C':
					pwm_change_state(SAW_ACC); break;
     956:	89 e8       	ldi	r24, 0x89	; 137
     958:	0e 94 55 04 	call	0x8aa	; 0x8aa <pwm_change_state>
     95c:	08 95       	ret
				default:
					pwm_change_state(LOOK_FOR_START);
     95e:	82 e8       	ldi	r24, 0x82	; 130
     960:	0e 94 55 04 	call	0x8aa	; 0x8aa <pwm_change_state>
     964:	08 95       	ret
			}
			break;
		case SAW_ABB:
			if (STATE_Pwm_Decode == 'D') pwm_out_high();
			STATE_Pwm_Decode = LOOK_FOR_START;				
     966:	82 e8       	ldi	r24, 0x82	; 130
     968:	80 93 0f 20 	sts	0x200F, r24
			break;
     96c:	08 95       	ret
		case SAW_ABC:
			if (STATE_Pwm_Decode == 'D') pwm_out_low();
			STATE_Pwm_Decode = LOOK_FOR_START;
     96e:	82 e8       	ldi	r24, 0x82	; 130
     970:	80 93 0f 20 	sts	0x200F, r24
			break;		
     974:	08 95       	ret
		case SAW_ACB:
			if (STATE_Pwm_Decode == 'D') pwm_pulse();
			STATE_Pwm_Decode = LOOK_FOR_START;
     976:	82 e8       	ldi	r24, 0x82	; 130
     978:	80 93 0f 20 	sts	0x200F, r24
			break;
     97c:	08 95       	ret
		case SAW_ACC:
			if (STATE_Pwm_Decode == 'D') pwm_reserved();
			STATE_Pwm_Decode = LOOK_FOR_START;
     97e:	82 e8       	ldi	r24, 0x82	; 130
     980:	80 93 0f 20 	sts	0x200F, r24
			break;
     984:	08 95       	ret
		default:
			STATE_Pwm_Decode = LOOK_FOR_START;
     986:	82 e8       	ldi	r24, 0x82	; 130
     988:	80 93 0f 20 	sts	0x200F, r24
     98c:	08 95       	ret

0000098e <pwm_decode>:
//Converts Pulse Width's into State Machine Changes
	//0x2000 = As.wav
	//0x4000 = Bs.wav
	//0x7000 = Cs.wav
	//0x9000 = Ds.wav
void pwm_decode(uint16_t width){
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	ec 01       	movw	r28, r24
	
	uart_send_byte(&udata,'-');
     994:	80 eb       	ldi	r24, 0xB0	; 176
     996:	99 e0       	ldi	r25, 0x09	; 9
     998:	6d e2       	ldi	r22, 0x2D	; 45
     99a:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
	uart_send_byte(&udata,'-');
     99e:	80 eb       	ldi	r24, 0xB0	; 176
     9a0:	99 e0       	ldi	r25, 0x09	; 9
     9a2:	6d e2       	ldi	r22, 0x2D	; 45
     9a4:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
	uart_send_byte(&udata,'-');
     9a8:	80 eb       	ldi	r24, 0xB0	; 176
     9aa:	99 e0       	ldi	r25, 0x09	; 9
     9ac:	6d e2       	ldi	r22, 0x2D	; 45
     9ae:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
	uart_send_HEX16(&udata, width);
     9b2:	80 eb       	ldi	r24, 0xB0	; 176
     9b4:	99 e0       	ldi	r25, 0x09	; 9
     9b6:	be 01       	movw	r22, r28
     9b8:	0e 94 c2 08 	call	0x1184	; 0x1184 <uart_send_HEX16>
	uart_send_byte(&udata,'-');
     9bc:	80 eb       	ldi	r24, 0xB0	; 176
     9be:	99 e0       	ldi	r25, 0x09	; 9
     9c0:	6d e2       	ldi	r22, 0x2D	; 45
     9c2:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
	uart_send_byte(&udata, 13);
     9c6:	80 eb       	ldi	r24, 0xB0	; 176
     9c8:	99 e0       	ldi	r25, 0x09	; 9
     9ca:	6d e0       	ldi	r22, 0x0D	; 13
     9cc:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
	
	if (between(width,0x1000,0x2000) == true){
     9d0:	ce 01       	movw	r24, r28
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	70 e1       	ldi	r23, 0x10	; 16
     9d6:	40 e0       	ldi	r20, 0x00	; 0
     9d8:	50 e2       	ldi	r21, 0x20	; 32
     9da:	0e 94 e7 03 	call	0x7ce	; 0x7ce <between>
     9de:	81 30       	cpi	r24, 0x01	; 1
     9e0:	19 f4       	brne	.+6      	; 0x9e8 <pwm_decode+0x5a>
		//Found A code!
		pwm_state('A');		
     9e2:	81 e4       	ldi	r24, 0x41	; 65
     9e4:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <pwm_state>
	}
	if (between(width,0x2000,0x3000) == true){
     9e8:	ce 01       	movw	r24, r28
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	70 e2       	ldi	r23, 0x20	; 32
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e3       	ldi	r21, 0x30	; 48
     9f2:	0e 94 e7 03 	call	0x7ce	; 0x7ce <between>
     9f6:	81 30       	cpi	r24, 0x01	; 1
     9f8:	19 f4       	brne	.+6      	; 0xa00 <pwm_decode+0x72>
		//Found B code!
		pwm_state('B');
     9fa:	82 e4       	ldi	r24, 0x42	; 66
     9fc:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <pwm_state>
	}
	if (between(width,0x4000,0x5000) == true){
     a00:	ce 01       	movw	r24, r28
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	70 e4       	ldi	r23, 0x40	; 64
     a06:	40 e0       	ldi	r20, 0x00	; 0
     a08:	50 e5       	ldi	r21, 0x50	; 80
     a0a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <between>
     a0e:	81 30       	cpi	r24, 0x01	; 1
     a10:	19 f4       	brne	.+6      	; 0xa18 <pwm_decode+0x8a>
		//Found C code!
		pwm_state('C');
     a12:	83 e4       	ldi	r24, 0x43	; 67
     a14:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <pwm_state>
	}
	if (between(width,0x7000,0x8000) == true){
     a18:	ce 01       	movw	r24, r28
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	70 e7       	ldi	r23, 0x70	; 112
     a1e:	40 e0       	ldi	r20, 0x00	; 0
     a20:	50 e8       	ldi	r21, 0x80	; 128
     a22:	0e 94 e7 03 	call	0x7ce	; 0x7ce <between>
     a26:	81 30       	cpi	r24, 0x01	; 1
     a28:	19 f4       	brne	.+6      	; 0xa30 <pwm_decode+0xa2>
		//Found D code!
		pwm_state('D');
     a2a:	84 e4       	ldi	r24, 0x44	; 68
     a2c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <pwm_state>
	}
}
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <edge_stop>:

void inline edge_start(){
	pwm_timer_reset();
}

void inline edge_stop(){
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
	uint16_t width;
	width = TCE0.CNT;
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	fa e0       	ldi	r31, 0x0A	; 10
     a3e:	c0 a1       	lds	r28, 0x40
     a40:	d1 a1       	lds	r29, 0x41
	if ((TCE0.INTFLAGS & _BV(0)) == 0x00){
     a42:	84 85       	ldd	r24, Z+12	; 0x0c
     a44:	80 fd       	sbrc	r24, 0
     a46:	12 c0       	rjmp	.+36     	; 0xa6c <edge_stop+0x36>
		uart_enqueue(13);
     a48:	8d e0       	ldi	r24, 0x0D	; 13
     a4a:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue(10);
     a4e:	8a e0       	ldi	r24, 0x0A	; 10
     a50:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('-');
     a54:	8d e2       	ldi	r24, 0x2D	; 45
     a56:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('-');
     a5a:	8d e2       	ldi	r24, 0x2D	; 45
     a5c:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enq_HEX16(width);
     a60:	ce 01       	movw	r24, r28
     a62:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <uart_enq_HEX16>
		pwm_decode(width);
     a66:	ce 01       	movw	r24, r28
     a68:	0e 94 c7 04 	call	0x98e	; 0x98e <pwm_decode>
	}
}
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <__vector_68>:
boolean pwm_mode(){
	return sw_on(SW1);
}

//ANALOG COMPARATOR (AC0) OUTPUT TOGGLE INTERRUPT
SIGNAL(ACA_AC0_vect){
     a72:	1f 92       	push	r1
     a74:	0f 92       	push	r0
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	0f 92       	push	r0
     a7a:	11 24       	eor	r1, r1
     a7c:	2f 93       	push	r18
     a7e:	3f 93       	push	r19
     a80:	4f 93       	push	r20
     a82:	5f 93       	push	r21
     a84:	6f 93       	push	r22
     a86:	7f 93       	push	r23
     a88:	8f 93       	push	r24
     a8a:	9f 93       	push	r25
     a8c:	af 93       	push	r26
     a8e:	bf 93       	push	r27
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	ef 93       	push	r30
     a96:	ff 93       	push	r31
	//led_toggle(LED_MID);
	if ((ACA.STATUS & B8(00010000)) > 0){
     a98:	e0 e8       	ldi	r30, 0x80	; 128
     a9a:	f3 e0       	ldi	r31, 0x03	; 3
     a9c:	87 81       	ldd	r24, Z+7	; 0x07
     a9e:	84 ff       	sbrs	r24, 4
     aa0:	28 c0       	rjmp	.+80     	; 0xaf2 <__vector_68+0x80>
		led_on(LED_MID);
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <led_on>
		//Detected: RISING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_start();
     aa8:	80 91 10 20 	lds	r24, 0x2010
     aac:	87 35       	cpi	r24, 0x57	; 87
     aae:	11 f4       	brne	.+4      	; 0xab4 <__vector_68+0x42>
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_start();
	}
}

void inline edge_start(){
	pwm_timer_reset();
     ab0:	0e 94 dd 03 	call	0x7ba	; 0x7ba <pwm_timer_reset>
	//led_toggle(LED_MID);
	if ((ACA.STATUS & B8(00010000)) > 0){
		led_on(LED_MID);
		//Detected: RISING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_start();
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_stop();
     ab4:	80 91 10 20 	lds	r24, 0x2010
     ab8:	88 35       	cpi	r24, 0x58	; 88
     aba:	09 f0       	breq	.+2      	; 0xabe <__vector_68+0x4c>
     abc:	40 c0       	rjmp	.+128    	; 0xb3e <__vector_68+0xcc>
	pwm_timer_reset();
}

void inline edge_stop(){
	uint16_t width;
	width = TCE0.CNT;
     abe:	e0 e0       	ldi	r30, 0x00	; 0
     ac0:	fa e0       	ldi	r31, 0x0A	; 10
     ac2:	c0 a1       	lds	r28, 0x40
     ac4:	d1 a1       	lds	r29, 0x41
	if ((TCE0.INTFLAGS & _BV(0)) == 0x00){
     ac6:	84 85       	ldd	r24, Z+12	; 0x0c
     ac8:	80 fd       	sbrc	r24, 0
     aca:	39 c0       	rjmp	.+114    	; 0xb3e <__vector_68+0xcc>
		uart_enqueue(13);
     acc:	8d e0       	ldi	r24, 0x0D	; 13
     ace:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue(10);
     ad2:	8a e0       	ldi	r24, 0x0A	; 10
     ad4:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('-');
     ad8:	8d e2       	ldi	r24, 0x2D	; 45
     ada:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('-');
     ade:	8d e2       	ldi	r24, 0x2D	; 45
     ae0:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enq_HEX16(width);
     ae4:	ce 01       	movw	r24, r28
     ae6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <uart_enq_HEX16>
		pwm_decode(width);
     aea:	ce 01       	movw	r24, r28
     aec:	0e 94 c7 04 	call	0x98e	; 0x98e <pwm_decode>
     af0:	26 c0       	rjmp	.+76     	; 0xb3e <__vector_68+0xcc>
		//Detected: RISING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_start();
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_stop();
	}
	else {
		led_off(LED_MID);
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <led_off>
		//Detected: FALLING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_stop();
     af8:	80 91 10 20 	lds	r24, 0x2010
     afc:	87 35       	cpi	r24, 0x57	; 87
     afe:	c9 f4       	brne	.+50     	; 0xb32 <__vector_68+0xc0>
	pwm_timer_reset();
}

void inline edge_stop(){
	uint16_t width;
	width = TCE0.CNT;
     b00:	e0 e0       	ldi	r30, 0x00	; 0
     b02:	fa e0       	ldi	r31, 0x0A	; 10
     b04:	c0 a1       	lds	r28, 0x40
     b06:	d1 a1       	lds	r29, 0x41
	if ((TCE0.INTFLAGS & _BV(0)) == 0x00){
     b08:	84 85       	ldd	r24, Z+12	; 0x0c
     b0a:	80 fd       	sbrc	r24, 0
     b0c:	12 c0       	rjmp	.+36     	; 0xb32 <__vector_68+0xc0>
		uart_enqueue(13);
     b0e:	8d e0       	ldi	r24, 0x0D	; 13
     b10:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue(10);
     b14:	8a e0       	ldi	r24, 0x0A	; 10
     b16:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('-');
     b1a:	8d e2       	ldi	r24, 0x2D	; 45
     b1c:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('-');
     b20:	8d e2       	ldi	r24, 0x2D	; 45
     b22:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enq_HEX16(width);
     b26:	ce 01       	movw	r24, r28
     b28:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <uart_enq_HEX16>
		pwm_decode(width);
     b2c:	ce 01       	movw	r24, r28
     b2e:	0e 94 c7 04 	call	0x98e	; 0x98e <pwm_decode>
	}
	else {
		led_off(LED_MID);
		//Detected: FALLING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_stop();
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_start();
     b32:	80 91 10 20 	lds	r24, 0x2010
     b36:	88 35       	cpi	r24, 0x58	; 88
     b38:	11 f4       	brne	.+4      	; 0xb3e <__vector_68+0xcc>
	}
}

void inline edge_start(){
	pwm_timer_reset();
     b3a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <pwm_timer_reset>
		led_off(LED_MID);
		//Detected: FALLING edge
		if (STATE_Pwm_Polarity == POSITIVE_PULSE) edge_stop();
		if (STATE_Pwm_Polarity == NEGATIVE_PULSE) edge_start();
	}
}
     b3e:	ff 91       	pop	r31
     b40:	ef 91       	pop	r30
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	bf 91       	pop	r27
     b48:	af 91       	pop	r26
     b4a:	9f 91       	pop	r25
     b4c:	8f 91       	pop	r24
     b4e:	7f 91       	pop	r23
     b50:	6f 91       	pop	r22
     b52:	5f 91       	pop	r21
     b54:	4f 91       	pop	r20
     b56:	3f 91       	pop	r19
     b58:	2f 91       	pop	r18
     b5a:	0f 90       	pop	r0
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	0f 90       	pop	r0
     b60:	1f 90       	pop	r1
     b62:	18 95       	reti

00000b64 <service_pwm>:
//Mainline Loop PWM Service Routine -- use to manage output pulse
//...and trigger states
//---must run only once per 2ms looptime
void service_pwm(void){
	//Process Decoding Timeout
	if (STATE_Pwm_Timeout > 0) STATE_Pwm_Timeout--;
     b64:	80 91 0e 20 	lds	r24, 0x200E
     b68:	88 23       	and	r24, r24
     b6a:	29 f0       	breq	.+10     	; 0xb76 <service_pwm+0x12>
     b6c:	81 50       	subi	r24, 0x01	; 1
     b6e:	80 93 0e 20 	sts	0x200E, r24
	if (STATE_Pwm_Timeout == 0) STATE_Pwm_Decode = LOOK_FOR_START;
     b72:	88 23       	and	r24, r24
     b74:	19 f4       	brne	.+6      	; 0xb7c <service_pwm+0x18>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	80 93 0f 20 	sts	0x200F, r24
	
	//Process component pulse durations
	switch(STATE_Pwm){
     b7c:	80 91 11 20 	lds	r24, 0x2011
     b80:	8f 34       	cpi	r24, 0x4F	; 79
     b82:	19 f0       	breq	.+6      	; 0xb8a <service_pwm+0x26>
     b84:	80 35       	cpi	r24, 0x50	; 80
     b86:	d1 f4       	brne	.+52     	; 0xbbc <service_pwm+0x58>
     b88:	05 c0       	rjmp	.+10     	; 0xb94 <service_pwm+0x30>
	case PWM_OUTPUT_HIGH:
		PORTA.OUTSET = B8(10000000); //PA7 output high
     b8a:	80 e8       	ldi	r24, 0x80	; 128
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f6 e0       	ldi	r31, 0x06	; 6
     b90:	85 83       	std	Z+5, r24	; 0x05
		break;
     b92:	08 95       	ret
	case PWM_OUTPUT_PULSE:
		if (STATE_Pwm_Counter == 0)	{
     b94:	80 91 13 20 	lds	r24, 0x2013
     b98:	88 23       	and	r24, r24
     b9a:	41 f4       	brne	.+16     	; 0xbac <service_pwm+0x48>
			//Done with pulse!
			PORTA.OUTCLR = B8(10000000); //PA7 output low
     b9c:	80 e8       	ldi	r24, 0x80	; 128
     b9e:	e0 e0       	ldi	r30, 0x00	; 0
     ba0:	f6 e0       	ldi	r31, 0x06	; 6
     ba2:	86 83       	std	Z+6, r24	; 0x06
			STATE_Pwm = PWM_OUTPUT_LOW;	//Update State (Done with pulse)
     ba4:	8e e4       	ldi	r24, 0x4E	; 78
     ba6:	80 93 11 20 	sts	0x2011, r24
     baa:	08 95       	ret
		}
		else {
			STATE_Pwm_Counter--; //Decrement Counter
     bac:	81 50       	subi	r24, 0x01	; 1
     bae:	80 93 13 20 	sts	0x2013, r24
			PORTA.OUTSET = B8(10000000); //PA7 output high
     bb2:	80 e8       	ldi	r24, 0x80	; 128
     bb4:	e0 e0       	ldi	r30, 0x00	; 0
     bb6:	f6 e0       	ldi	r31, 0x06	; 6
     bb8:	85 83       	std	Z+5, r24	; 0x05
     bba:	08 95       	ret
		}
		break;
	case PWM_OUTPUT_LOW:
	default:
		PORTA.OUTCLR = B8(10000000); //PA7 output low
     bbc:	80 e8       	ldi	r24, 0x80	; 128
     bbe:	e0 e0       	ldi	r30, 0x00	; 0
     bc0:	f6 e0       	ldi	r31, 0x06	; 6
     bc2:	86 83       	std	Z+6, r24	; 0x06
     bc4:	08 95       	ret

00000bc6 <pwm_hunt_target>:
	uint8_t equal = true;
	for(uint8_t i=0; i<TARGET_LENGTH; i++) { if (arr1[i] != arr2[i]){equal = false;} }
	return equal;
}

inline void pwm_hunt_target(){
     bc6:	6f 92       	push	r6
     bc8:	7f 92       	push	r7
     bca:	8f 92       	push	r8
     bcc:	9f 92       	push	r9
     bce:	af 92       	push	r10
     bd0:	bf 92       	push	r11
     bd2:	cf 92       	push	r12
     bd4:	df 92       	push	r13
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
	uint8_t how_many = uart_icount();
     be2:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <uart_icount>
	uint8_t current_index = uart_itail;
     be6:	d0 90 1d 20 	lds	r13, 0x201D
	if (how_many < TARGET_LENGTH){return;} //abort if not enough data received
     bea:	8d 30       	cpi	r24, 0x0D	; 13
     bec:	08 f4       	brcc	.+2      	; 0xbf0 <pwm_hunt_target+0x2a>
     bee:	59 c0       	rjmp	.+178    	; 0xca2 <pwm_hunt_target+0xdc>
	for (uint8_t i=0; i<=(how_many-TARGET_LENGTH); i++){
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0f 2e       	mov	r0, r31
     bf4:	f3 ef       	ldi	r31, 0xF3	; 243
     bf6:	6f 2e       	mov	r6, r31
     bf8:	ff ef       	ldi	r31, 0xFF	; 255
     bfa:	7f 2e       	mov	r7, r31
     bfc:	f0 2d       	mov	r31, r0
     bfe:	68 0e       	add	r6, r24
     c00:	79 1e       	adc	r7, r25
     c02:	77 20       	and	r7, r7
     c04:	0c f4       	brge	.+2      	; 0xc08 <pwm_hunt_target+0x42>
     c06:	4d c0       	rjmp	.+154    	; 0xca2 <pwm_hunt_target+0xdc>
     c08:	cc 24       	eor	r12, r12
		if (current_index >= MAX_IBUFFER_LEN){current_index = 0;}
     c0a:	0f 2e       	mov	r0, r31
     c0c:	f8 e1       	ldi	r31, 0x18	; 24
     c0e:	8f 2e       	mov	r8, r31
     c10:	f1 e2       	ldi	r31, 0x21	; 33
     c12:	9f 2e       	mov	r9, r31
     c14:	f0 2d       	mov	r31, r0
	uint8_t equal = true;
	for(uint8_t i=0; i<TARGET_LENGTH; i++) { if (arr1[i] != arr2[i]){equal = false;} }
	return equal;
}

inline void pwm_hunt_target(){
     c16:	b8 2c       	mov	r11, r8
     c18:	a9 2c       	mov	r10, r9
     c1a:	84 01       	movw	r16, r8
     c1c:	03 5f       	subi	r16, 0xF3	; 243
     c1e:	1f 4f       	sbci	r17, 0xFF	; 255
//#############################################################

inline void build_dut(uint8_t start_index){
	for(uint8_t i=0; i<TARGET_LENGTH; i++){
	if (start_index+i >= MAX_IBUFFER_LEN){trigger_compare[i] = uart_ibuffer[start_index+i-MAX_IBUFFER_LEN];}
else {trigger_compare[i] = uart_ibuffer[start_index+i];}
     c20:	0f 2e       	mov	r0, r31
     c22:	fe e1       	ldi	r31, 0x1E	; 30
     c24:	ef 2e       	mov	r14, r31
     c26:	f0 e2       	ldi	r31, 0x20	; 32
     c28:	ff 2e       	mov	r15, r31
     c2a:	f0 2d       	mov	r31, r0
inline void pwm_hunt_target(){
	uint8_t how_many = uart_icount();
	uint8_t current_index = uart_itail;
	if (how_many < TARGET_LENGTH){return;} //abort if not enough data received
	for (uint8_t i=0; i<=(how_many-TARGET_LENGTH); i++){
		if (current_index >= MAX_IBUFFER_LEN){current_index = 0;}
     c2c:	89 ef       	ldi	r24, 0xF9	; 249
     c2e:	8d 15       	cp	r24, r13
     c30:	08 f4       	brcc	.+2      	; 0xc34 <pwm_hunt_target+0x6e>
     c32:	dd 24       	eor	r13, r13
	uint8_t equal = true;
	for(uint8_t i=0; i<TARGET_LENGTH; i++) { if (arr1[i] != arr2[i]){equal = false;} }
	return equal;
}

inline void pwm_hunt_target(){
     c34:	2d 2d       	mov	r18, r13
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	2a 5f       	subi	r18, 0xFA	; 250
     c3a:	30 40       	sbci	r19, 0x00	; 0
	uint8_t how_many = uart_icount();
	uint8_t current_index = uart_itail;
	if (how_many < TARGET_LENGTH){return;} //abort if not enough data received
	for (uint8_t i=0; i<=(how_many-TARGET_LENGTH); i++){
		if (current_index >= MAX_IBUFFER_LEN){current_index = 0;}
     c3c:	d4 01       	movw	r26, r8
	uint8_t equal = true;
	for(uint8_t i=0; i<TARGET_LENGTH; i++) { if (arr1[i] != arr2[i]){equal = false;} }
	return equal;
}

inline void pwm_hunt_target(){
     c3e:	cb 2d       	mov	r28, r11
     c40:	da 2d       	mov	r29, r10
     c42:	c9 01       	movw	r24, r18
     c44:	86 50       	subi	r24, 0x06	; 6
     c46:	9f 4f       	sbci	r25, 0xFF	; 255
//## SERIAL TRIGGERING FUNCTIONS
//#############################################################

inline void build_dut(uint8_t start_index){
	for(uint8_t i=0; i<TARGET_LENGTH; i++){
	if (start_index+i >= MAX_IBUFFER_LEN){trigger_compare[i] = uart_ibuffer[start_index+i-MAX_IBUFFER_LEN];}
     c48:	8a 3f       	cpi	r24, 0xFA	; 250
     c4a:	91 05       	cpc	r25, r1
     c4c:	34 f0       	brlt	.+12     	; 0xc5a <pwm_hunt_target+0x94>
     c4e:	f7 01       	movw	r30, r14
     c50:	e2 0f       	add	r30, r18
     c52:	f3 1f       	adc	r31, r19
     c54:	80 81       	ld	r24, Z
     c56:	8c 93       	st	X, r24
     c58:	05 c0       	rjmp	.+10     	; 0xc64 <pwm_hunt_target+0x9e>
else {trigger_compare[i] = uart_ibuffer[start_index+i];}
     c5a:	8e 0d       	add	r24, r14
     c5c:	9f 1d       	adc	r25, r15
     c5e:	fc 01       	movw	r30, r24
     c60:	80 81       	ld	r24, Z
     c62:	8c 93       	st	X, r24
     c64:	2f 5f       	subi	r18, 0xFF	; 255
     c66:	3f 4f       	sbci	r19, 0xFF	; 255
     c68:	11 96       	adiw	r26, 0x01	; 1
//#############################################################
//## SERIAL TRIGGERING FUNCTIONS
//#############################################################

inline void build_dut(uint8_t start_index){
	for(uint8_t i=0; i<TARGET_LENGTH; i++){
     c6a:	a0 17       	cp	r26, r16
     c6c:	b1 07       	cpc	r27, r17
     c6e:	49 f7       	brne	.-46     	; 0xc42 <pwm_hunt_target+0x7c>
     c70:	e0 91 22 22 	lds	r30, 0x2222
     c74:	f0 91 23 22 	lds	r31, 0x2223
else {trigger_compare[i] = uart_ibuffer[start_index+i];}
	}	
}

inline uint8_t array_compare(uint8_t* arr1, uint8_t* arr2){
	uint8_t equal = true;
     c78:	21 e0       	ldi	r18, 0x01	; 1
	for(uint8_t i=0; i<TARGET_LENGTH; i++) { if (arr1[i] != arr2[i]){equal = false;} }
     c7a:	91 91       	ld	r25, Z+
     c7c:	89 91       	ld	r24, Y+
     c7e:	98 13       	cpse	r25, r24
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	c0 17       	cp	r28, r16
     c84:	d1 07       	cpc	r29, r17
     c86:	c9 f7       	brne	.-14     	; 0xc7a <pwm_hunt_target+0xb4>
	uint8_t current_index = uart_itail;
	if (how_many < TARGET_LENGTH){return;} //abort if not enough data received
	for (uint8_t i=0; i<=(how_many-TARGET_LENGTH); i++){
		if (current_index >= MAX_IBUFFER_LEN){current_index = 0;}
		build_dut(current_index);
		if (array_compare(trigger_target, trigger_compare) == true){
     c88:	21 30       	cpi	r18, 0x01	; 1
     c8a:	21 f4       	brne	.+8      	; 0xc94 <pwm_hunt_target+0xce>
			pwm_pulse(); //fire off the solenoid
     c8c:	0e 94 1c 04 	call	0x838	; 0x838 <pwm_pulse>
			init_uart_ibuffer(); //flush buffer to prevent retriggering
     c90:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <init_uart_ibuffer>
		}
		current_index++;
     c94:	d3 94       	inc	r13

inline void pwm_hunt_target(){
	uint8_t how_many = uart_icount();
	uint8_t current_index = uart_itail;
	if (how_many < TARGET_LENGTH){return;} //abort if not enough data received
	for (uint8_t i=0; i<=(how_many-TARGET_LENGTH); i++){
     c96:	c3 94       	inc	r12
     c98:	8c 2d       	mov	r24, r12
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	68 16       	cp	r6, r24
     c9e:	79 06       	cpc	r7, r25
     ca0:	2c f6       	brge	.-118    	; 0xc2c <pwm_hunt_target+0x66>
			pwm_pulse(); //fire off the solenoid
			init_uart_ibuffer(); //flush buffer to prevent retriggering
		}
		current_index++;
	}
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	ff 90       	pop	r15
     cac:	ef 90       	pop	r14
     cae:	df 90       	pop	r13
     cb0:	cf 90       	pop	r12
     cb2:	bf 90       	pop	r11
     cb4:	af 90       	pop	r10
     cb6:	9f 90       	pop	r9
     cb8:	8f 90       	pop	r8
     cba:	7f 90       	pop	r7
     cbc:	6f 90       	pop	r6
     cbe:	08 95       	ret

00000cc0 <init_uart>:
//= INITIALIZATION ROUTINES
//==================================

//Select which uart to initialize from the list of defined constants in the io.h
//Pass in Baud rate from a list of defined constants
void init_uart(USART_t* which, uint8_t baud_rate){
     cc0:	fc 01       	movw	r30, r24
	//Config the PORT
		if (&(*which) == &USARTC0){
     cc2:	88 e0       	ldi	r24, 0x08	; 8
     cc4:	e0 3a       	cpi	r30, 0xA0	; 160
     cc6:	f8 07       	cpc	r31, r24
     cc8:	51 f4       	brne	.+20     	; 0xcde <init_uart+0x1e>
			PORTC.DIRSET = B8(00001000); //TX pin as output
     cca:	a0 e4       	ldi	r26, 0x40	; 64
     ccc:	b6 e0       	ldi	r27, 0x06	; 6
     cce:	88 e0       	ldi	r24, 0x08	; 8
     cd0:	11 96       	adiw	r26, 0x01	; 1
     cd2:	8c 93       	st	X, r24
     cd4:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(00001000); //TX initial output value is high
     cd6:	15 96       	adiw	r26, 0x05	; 5
     cd8:	8c 93       	st	X, r24
     cda:	15 97       	sbiw	r26, 0x05	; 5
     cdc:	37 c0       	rjmp	.+110    	; 0xd4c <init_uart+0x8c>
		}
		else if (&(*which) == &USARTC1) {
     cde:	88 e0       	ldi	r24, 0x08	; 8
     ce0:	e0 3b       	cpi	r30, 0xB0	; 176
     ce2:	f8 07       	cpc	r31, r24
     ce4:	51 f4       	brne	.+20     	; 0xcfa <init_uart+0x3a>
			PORTC.DIRSET = B8(10000000); //TX pin as output
     ce6:	a0 e4       	ldi	r26, 0x40	; 64
     ce8:	b6 e0       	ldi	r27, 0x06	; 6
     cea:	80 e8       	ldi	r24, 0x80	; 128
     cec:	11 96       	adiw	r26, 0x01	; 1
     cee:	8c 93       	st	X, r24
     cf0:	11 97       	sbiw	r26, 0x01	; 1
			PORTC.OUTSET = B8(10000000); //TX initial output value is high
     cf2:	15 96       	adiw	r26, 0x05	; 5
     cf4:	8c 93       	st	X, r24
     cf6:	15 97       	sbiw	r26, 0x05	; 5
     cf8:	29 c0       	rjmp	.+82     	; 0xd4c <init_uart+0x8c>
		}
		else if (&(*which) == &USARTD0) {
     cfa:	89 e0       	ldi	r24, 0x09	; 9
     cfc:	e0 3a       	cpi	r30, 0xA0	; 160
     cfe:	f8 07       	cpc	r31, r24
     d00:	51 f4       	brne	.+20     	; 0xd16 <init_uart+0x56>
			PORTD.DIRSET = B8(00001000); //TX pin as output
     d02:	a0 e6       	ldi	r26, 0x60	; 96
     d04:	b6 e0       	ldi	r27, 0x06	; 6
     d06:	88 e0       	ldi	r24, 0x08	; 8
     d08:	11 96       	adiw	r26, 0x01	; 1
     d0a:	8c 93       	st	X, r24
     d0c:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(00001000); //TX initial output value is high
     d0e:	15 96       	adiw	r26, 0x05	; 5
     d10:	8c 93       	st	X, r24
     d12:	15 97       	sbiw	r26, 0x05	; 5
     d14:	1b c0       	rjmp	.+54     	; 0xd4c <init_uart+0x8c>
		}	
		else if (&(*which) == &USARTD1) {
     d16:	89 e0       	ldi	r24, 0x09	; 9
     d18:	e0 3b       	cpi	r30, 0xB0	; 176
     d1a:	f8 07       	cpc	r31, r24
     d1c:	51 f4       	brne	.+20     	; 0xd32 <init_uart+0x72>
			PORTD.DIRSET = B8(10000000); //TX pin as output
     d1e:	a0 e6       	ldi	r26, 0x60	; 96
     d20:	b6 e0       	ldi	r27, 0x06	; 6
     d22:	80 e8       	ldi	r24, 0x80	; 128
     d24:	11 96       	adiw	r26, 0x01	; 1
     d26:	8c 93       	st	X, r24
     d28:	11 97       	sbiw	r26, 0x01	; 1
			PORTD.OUTSET = B8(10000000); //TX initial output value is high
     d2a:	15 96       	adiw	r26, 0x05	; 5
     d2c:	8c 93       	st	X, r24
     d2e:	15 97       	sbiw	r26, 0x05	; 5
     d30:	0d c0       	rjmp	.+26     	; 0xd4c <init_uart+0x8c>
		}
		else if (&(*which) == &USARTE0) {
     d32:	8a e0       	ldi	r24, 0x0A	; 10
     d34:	e0 3a       	cpi	r30, 0xA0	; 160
     d36:	f8 07       	cpc	r31, r24
     d38:	49 f4       	brne	.+18     	; 0xd4c <init_uart+0x8c>
			PORTE.DIRSET = B8(00001000); //TX pin as output
     d3a:	a0 e8       	ldi	r26, 0x80	; 128
     d3c:	b6 e0       	ldi	r27, 0x06	; 6
     d3e:	88 e0       	ldi	r24, 0x08	; 8
     d40:	11 96       	adiw	r26, 0x01	; 1
     d42:	8c 93       	st	X, r24
     d44:	11 97       	sbiw	r26, 0x01	; 1
			PORTE.OUTSET = B8(00001000); //TX initial output value is high
     d46:	15 96       	adiw	r26, 0x05	; 5
     d48:	8c 93       	st	X, r24
     d4a:	15 97       	sbiw	r26, 0x05	; 5
		}
		else {
		}
	//Set baud rate
		switch(baud_rate){
     d4c:	61 30       	cpi	r22, 0x01	; 1
     d4e:	39 f0       	breq	.+14     	; 0xd5e <init_uart+0x9e>
     d50:	62 30       	cpi	r22, 0x02	; 2
     d52:	51 f4       	brne	.+20     	; 0xd68 <init_uart+0xa8>
		case BAUD_38400:
			//BSEL = 0xCC5; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xAC;
     d54:	8c ea       	ldi	r24, 0xAC	; 172
     d56:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0xC5;
     d58:	85 ec       	ldi	r24, 0xC5	; 197
     d5a:	86 83       	std	Z+6, r24	; 0x06
			break;
     d5c:	09 c0       	rjmp	.+18     	; 0xd70 <init_uart+0xb0>
		case BAUD_57600:
			//BSEL = 0x86E; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xA8;
     d5e:	88 ea       	ldi	r24, 0xA8	; 168
     d60:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x6E;
     d62:	8e e6       	ldi	r24, 0x6E	; 110
     d64:	86 83       	std	Z+6, r24	; 0x06
			break;
     d66:	04 c0       	rjmp	.+8      	; 0xd70 <init_uart+0xb0>
		case BAUD_115200:
		default:
			//BSEL = 0x417; BSCALE = -6; error = 0.01%
			which->BAUDCTRLB = 0xA4;
     d68:	84 ea       	ldi	r24, 0xA4	; 164
     d6a:	87 83       	std	Z+7, r24	; 0x07
			which->BAUDCTRLA = 0x17;		
     d6c:	87 e1       	ldi	r24, 0x17	; 23
     d6e:	86 83       	std	Z+6, r24	; 0x06
		}
	//Config USART Module
		which->CTRLA = 0x00; //Current driver does not enable any interrupts
     d70:	13 82       	std	Z+3, r1	; 0x03
		which->CTRLB = B8(00011000); //Enable Rx and TX; Do not use double speed mode
     d72:	88 e1       	ldi	r24, 0x18	; 24
     d74:	84 83       	std	Z+4, r24	; 0x04
		which->CTRLC = B8(00000011); //uart Mode; Use N-8-1 frame configuration
     d76:	83 e0       	ldi	r24, 0x03	; 3
     d78:	85 83       	std	Z+5, r24	; 0x05
	//
}
     d7a:	08 95       	ret

00000d7c <uart_send_byte>:
//= DISPLAY (BLOCKING) FUNCTIONS
//==================================


//Sends one byte; Spin-lock until UART is ready to transmit (BE CAREFUL!)
void uart_send_byte( USART_t* which, unsigned char dataB){
     d7c:	fc 01       	movw	r30, r24
	while((which->STATUS & USART_DREIF_bm) == 0x00); //wait until the transmit buffer is ready to receive new data (DREIF flag is 1 when empty)
     d7e:	81 81       	ldd	r24, Z+1	; 0x01
     d80:	85 ff       	sbrs	r24, 5
     d82:	fd cf       	rjmp	.-6      	; 0xd7e <uart_send_byte+0x2>
	which->DATA = dataB;	
     d84:	60 83       	st	Z, r22
}
     d86:	08 95       	ret

00000d88 <uart_send_string>:

//Sends an entire string (blocking)
void uart_send_string(USART_t* which, char* theString){
     d88:	cf 92       	push	r12
     d8a:	df 92       	push	r13
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	6c 01       	movw	r12, r24
	uint16_t length = (uint16_t)strlen(theString);
     d9a:	e6 2f       	mov	r30, r22
     d9c:	f7 2f       	mov	r31, r23
     d9e:	ef 01       	movw	r28, r30
     da0:	09 90       	ld	r0, Y+
     da2:	00 20       	and	r0, r0
     da4:	e9 f7       	brne	.-6      	; 0xda0 <uart_send_string+0x18>
     da6:	21 97       	sbiw	r28, 0x01	; 1
     da8:	ce 1b       	sub	r28, r30
     daa:	df 0b       	sbc	r29, r31
	for (uint16_t i=0; i<length; i++){uart_send_byte(which, theString[i]);}	
     dac:	79 f0       	breq	.+30     	; 0xdcc <uart_send_string+0x44>
     dae:	e6 2e       	mov	r14, r22
     db0:	f7 2e       	mov	r15, r23
     db2:	00 e0       	ldi	r16, 0x00	; 0
     db4:	10 e0       	ldi	r17, 0x00	; 0
     db6:	f7 01       	movw	r30, r14
     db8:	61 91       	ld	r22, Z+
     dba:	7f 01       	movw	r14, r30
     dbc:	c6 01       	movw	r24, r12
     dbe:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
     dc2:	0f 5f       	subi	r16, 0xFF	; 255
     dc4:	1f 4f       	sbci	r17, 0xFF	; 255
     dc6:	0c 17       	cp	r16, r28
     dc8:	1d 07       	cpc	r17, r29
     dca:	a9 f7       	brne	.-22     	; 0xdb6 <uart_send_string+0x2e>
}
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	08 95       	ret

00000dde <uart_send_BIN4>:
	
//Most Significant Bit first
void uart_send_BIN4(USART_t* which, uint8_t lowb){
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	ec 01       	movw	r28, r24
	switch(lowb){
     de4:	67 30       	cpi	r22, 0x07	; 7
     de6:	09 f4       	brne	.+2      	; 0xdea <uart_send_BIN4+0xc>
     de8:	9d c0       	rjmp	.+314    	; 0xf24 <uart_send_BIN4+0x146>
     dea:	68 30       	cpi	r22, 0x08	; 8
     dec:	90 f4       	brcc	.+36     	; 0xe12 <uart_send_BIN4+0x34>
     dee:	63 30       	cpi	r22, 0x03	; 3
     df0:	09 f4       	brne	.+2      	; 0xdf4 <uart_send_BIN4+0x16>
     df2:	58 c0       	rjmp	.+176    	; 0xea4 <uart_send_BIN4+0xc6>
     df4:	64 30       	cpi	r22, 0x04	; 4
     df6:	30 f4       	brcc	.+12     	; 0xe04 <uart_send_BIN4+0x26>
     df8:	61 30       	cpi	r22, 0x01	; 1
     dfa:	a1 f1       	breq	.+104    	; 0xe64 <uart_send_BIN4+0x86>
     dfc:	62 30       	cpi	r22, 0x02	; 2
     dfe:	08 f0       	brcs	.+2      	; 0xe02 <uart_send_BIN4+0x24>
     e00:	41 c0       	rjmp	.+130    	; 0xe84 <uart_send_BIN4+0xa6>
     e02:	20 c0       	rjmp	.+64     	; 0xe44 <uart_send_BIN4+0x66>
     e04:	65 30       	cpi	r22, 0x05	; 5
     e06:	09 f4       	brne	.+2      	; 0xe0a <uart_send_BIN4+0x2c>
     e08:	6d c0       	rjmp	.+218    	; 0xee4 <uart_send_BIN4+0x106>
     e0a:	66 30       	cpi	r22, 0x06	; 6
     e0c:	08 f0       	brcs	.+2      	; 0xe10 <uart_send_BIN4+0x32>
     e0e:	7a c0       	rjmp	.+244    	; 0xf04 <uart_send_BIN4+0x126>
     e10:	59 c0       	rjmp	.+178    	; 0xec4 <uart_send_BIN4+0xe6>
     e12:	6b 30       	cpi	r22, 0x0B	; 11
     e14:	09 f4       	brne	.+2      	; 0xe18 <uart_send_BIN4+0x3a>
     e16:	c6 c0       	rjmp	.+396    	; 0xfa4 <uart_send_BIN4+0x1c6>
     e18:	6c 30       	cpi	r22, 0x0C	; 12
     e1a:	38 f4       	brcc	.+14     	; 0xe2a <uart_send_BIN4+0x4c>
     e1c:	69 30       	cpi	r22, 0x09	; 9
     e1e:	09 f4       	brne	.+2      	; 0xe22 <uart_send_BIN4+0x44>
     e20:	a1 c0       	rjmp	.+322    	; 0xf64 <uart_send_BIN4+0x186>
     e22:	6a 30       	cpi	r22, 0x0A	; 10
     e24:	08 f0       	brcs	.+2      	; 0xe28 <uart_send_BIN4+0x4a>
     e26:	ae c0       	rjmp	.+348    	; 0xf84 <uart_send_BIN4+0x1a6>
     e28:	8d c0       	rjmp	.+282    	; 0xf44 <uart_send_BIN4+0x166>
     e2a:	6d 30       	cpi	r22, 0x0D	; 13
     e2c:	09 f4       	brne	.+2      	; 0xe30 <uart_send_BIN4+0x52>
     e2e:	da c0       	rjmp	.+436    	; 0xfe4 <uart_send_BIN4+0x206>
     e30:	6d 30       	cpi	r22, 0x0D	; 13
     e32:	08 f4       	brcc	.+2      	; 0xe36 <uart_send_BIN4+0x58>
     e34:	c7 c0       	rjmp	.+398    	; 0xfc4 <uart_send_BIN4+0x1e6>
     e36:	6e 30       	cpi	r22, 0x0E	; 14
     e38:	09 f4       	brne	.+2      	; 0xe3c <uart_send_BIN4+0x5e>
     e3a:	e4 c0       	rjmp	.+456    	; 0x1004 <uart_send_BIN4+0x226>
     e3c:	6f 30       	cpi	r22, 0x0F	; 15
     e3e:	09 f0       	breq	.+2      	; 0xe42 <uart_send_BIN4+0x64>
     e40:	00 c1       	rjmp	.+512    	; 0x1042 <uart_send_BIN4+0x264>
     e42:	f0 c0       	rjmp	.+480    	; 0x1024 <uart_send_BIN4+0x246>
	case(0):
		uart_send_byte(which,'0');
     e44:	60 e3       	ldi	r22, 0x30	; 48
     e46:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     e4a:	ce 01       	movw	r24, r28
     e4c:	60 e3       	ldi	r22, 0x30	; 48
     e4e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     e52:	ce 01       	movw	r24, r28
     e54:	60 e3       	ldi	r22, 0x30	; 48
     e56:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     e5a:	ce 01       	movw	r24, r28
     e5c:	60 e3       	ldi	r22, 0x30	; 48
     e5e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
     e62:	ef c0       	rjmp	.+478    	; 0x1042 <uart_send_BIN4+0x264>
	case(1):
		uart_send_byte(which,'0');
     e64:	60 e3       	ldi	r22, 0x30	; 48
     e66:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     e6a:	ce 01       	movw	r24, r28
     e6c:	60 e3       	ldi	r22, 0x30	; 48
     e6e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     e72:	ce 01       	movw	r24, r28
     e74:	60 e3       	ldi	r22, 0x30	; 48
     e76:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     e7a:	ce 01       	movw	r24, r28
     e7c:	61 e3       	ldi	r22, 0x31	; 49
     e7e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
     e82:	df c0       	rjmp	.+446    	; 0x1042 <uart_send_BIN4+0x264>
	case(2):
		uart_send_byte(which,'0');
     e84:	60 e3       	ldi	r22, 0x30	; 48
     e86:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     e8a:	ce 01       	movw	r24, r28
     e8c:	60 e3       	ldi	r22, 0x30	; 48
     e8e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     e92:	ce 01       	movw	r24, r28
     e94:	61 e3       	ldi	r22, 0x31	; 49
     e96:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     e9a:	ce 01       	movw	r24, r28
     e9c:	60 e3       	ldi	r22, 0x30	; 48
     e9e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
     ea2:	cf c0       	rjmp	.+414    	; 0x1042 <uart_send_BIN4+0x264>
	case(3):
		uart_send_byte(which,'0');
     ea4:	60 e3       	ldi	r22, 0x30	; 48
     ea6:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     eaa:	ce 01       	movw	r24, r28
     eac:	60 e3       	ldi	r22, 0x30	; 48
     eae:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     eb2:	ce 01       	movw	r24, r28
     eb4:	61 e3       	ldi	r22, 0x31	; 49
     eb6:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     eba:	ce 01       	movw	r24, r28
     ebc:	61 e3       	ldi	r22, 0x31	; 49
     ebe:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
     ec2:	bf c0       	rjmp	.+382    	; 0x1042 <uart_send_BIN4+0x264>
	case(4):
		uart_send_byte(which,'0');
     ec4:	60 e3       	ldi	r22, 0x30	; 48
     ec6:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     eca:	ce 01       	movw	r24, r28
     ecc:	61 e3       	ldi	r22, 0x31	; 49
     ece:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     ed2:	ce 01       	movw	r24, r28
     ed4:	60 e3       	ldi	r22, 0x30	; 48
     ed6:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     eda:	ce 01       	movw	r24, r28
     edc:	60 e3       	ldi	r22, 0x30	; 48
     ede:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
     ee2:	af c0       	rjmp	.+350    	; 0x1042 <uart_send_BIN4+0x264>
	case(5):
		uart_send_byte(which,'0');
     ee4:	60 e3       	ldi	r22, 0x30	; 48
     ee6:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     eea:	ce 01       	movw	r24, r28
     eec:	61 e3       	ldi	r22, 0x31	; 49
     eee:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     ef2:	ce 01       	movw	r24, r28
     ef4:	60 e3       	ldi	r22, 0x30	; 48
     ef6:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     efa:	ce 01       	movw	r24, r28
     efc:	61 e3       	ldi	r22, 0x31	; 49
     efe:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
     f02:	9f c0       	rjmp	.+318    	; 0x1042 <uart_send_BIN4+0x264>
	case(6):
		uart_send_byte(which,'0');
     f04:	60 e3       	ldi	r22, 0x30	; 48
     f06:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     f0a:	ce 01       	movw	r24, r28
     f0c:	61 e3       	ldi	r22, 0x31	; 49
     f0e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     f12:	ce 01       	movw	r24, r28
     f14:	61 e3       	ldi	r22, 0x31	; 49
     f16:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     f1a:	ce 01       	movw	r24, r28
     f1c:	60 e3       	ldi	r22, 0x30	; 48
     f1e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
     f22:	8f c0       	rjmp	.+286    	; 0x1042 <uart_send_BIN4+0x264>
	case(7):
		uart_send_byte(which,'0');
     f24:	60 e3       	ldi	r22, 0x30	; 48
     f26:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     f2a:	ce 01       	movw	r24, r28
     f2c:	61 e3       	ldi	r22, 0x31	; 49
     f2e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     f32:	ce 01       	movw	r24, r28
     f34:	61 e3       	ldi	r22, 0x31	; 49
     f36:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     f3a:	ce 01       	movw	r24, r28
     f3c:	61 e3       	ldi	r22, 0x31	; 49
     f3e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
     f42:	7f c0       	rjmp	.+254    	; 0x1042 <uart_send_BIN4+0x264>
	case(8):
		uart_send_byte(which,'1');
     f44:	61 e3       	ldi	r22, 0x31	; 49
     f46:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     f4a:	ce 01       	movw	r24, r28
     f4c:	60 e3       	ldi	r22, 0x30	; 48
     f4e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     f52:	ce 01       	movw	r24, r28
     f54:	60 e3       	ldi	r22, 0x30	; 48
     f56:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     f5a:	ce 01       	movw	r24, r28
     f5c:	60 e3       	ldi	r22, 0x30	; 48
     f5e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
     f62:	6f c0       	rjmp	.+222    	; 0x1042 <uart_send_BIN4+0x264>
	case(9):
		uart_send_byte(which,'1');
     f64:	61 e3       	ldi	r22, 0x31	; 49
     f66:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     f6a:	ce 01       	movw	r24, r28
     f6c:	60 e3       	ldi	r22, 0x30	; 48
     f6e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     f72:	ce 01       	movw	r24, r28
     f74:	60 e3       	ldi	r22, 0x30	; 48
     f76:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     f7a:	ce 01       	movw	r24, r28
     f7c:	61 e3       	ldi	r22, 0x31	; 49
     f7e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
     f82:	5f c0       	rjmp	.+190    	; 0x1042 <uart_send_BIN4+0x264>
	case(10):
		uart_send_byte(which,'1');
     f84:	61 e3       	ldi	r22, 0x31	; 49
     f86:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     f8a:	ce 01       	movw	r24, r28
     f8c:	60 e3       	ldi	r22, 0x30	; 48
     f8e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     f92:	ce 01       	movw	r24, r28
     f94:	61 e3       	ldi	r22, 0x31	; 49
     f96:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     f9a:	ce 01       	movw	r24, r28
     f9c:	60 e3       	ldi	r22, 0x30	; 48
     f9e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
     fa2:	4f c0       	rjmp	.+158    	; 0x1042 <uart_send_BIN4+0x264>
	case(11):
		uart_send_byte(which,'1');
     fa4:	61 e3       	ldi	r22, 0x31	; 49
     fa6:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     faa:	ce 01       	movw	r24, r28
     fac:	60 e3       	ldi	r22, 0x30	; 48
     fae:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     fb2:	ce 01       	movw	r24, r28
     fb4:	61 e3       	ldi	r22, 0x31	; 49
     fb6:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     fba:	ce 01       	movw	r24, r28
     fbc:	61 e3       	ldi	r22, 0x31	; 49
     fbe:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
     fc2:	3f c0       	rjmp	.+126    	; 0x1042 <uart_send_BIN4+0x264>
	case(12):
		uart_send_byte(which,'1');
     fc4:	61 e3       	ldi	r22, 0x31	; 49
     fc6:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     fca:	ce 01       	movw	r24, r28
     fcc:	61 e3       	ldi	r22, 0x31	; 49
     fce:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     fd2:	ce 01       	movw	r24, r28
     fd4:	60 e3       	ldi	r22, 0x30	; 48
     fd6:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     fda:	ce 01       	movw	r24, r28
     fdc:	60 e3       	ldi	r22, 0x30	; 48
     fde:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
     fe2:	2f c0       	rjmp	.+94     	; 0x1042 <uart_send_BIN4+0x264>
	case(13):
		uart_send_byte(which,'1');
     fe4:	61 e3       	ldi	r22, 0x31	; 49
     fe6:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     fea:	ce 01       	movw	r24, r28
     fec:	61 e3       	ldi	r22, 0x31	; 49
     fee:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
     ff2:	ce 01       	movw	r24, r28
     ff4:	60 e3       	ldi	r22, 0x30	; 48
     ff6:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
     ffa:	ce 01       	movw	r24, r28
     ffc:	61 e3       	ldi	r22, 0x31	; 49
     ffe:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    1002:	1f c0       	rjmp	.+62     	; 0x1042 <uart_send_BIN4+0x264>
	case(14):
		uart_send_byte(which,'1');
    1004:	61 e3       	ldi	r22, 0x31	; 49
    1006:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
    100a:	ce 01       	movw	r24, r28
    100c:	61 e3       	ldi	r22, 0x31	; 49
    100e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
    1012:	ce 01       	movw	r24, r28
    1014:	61 e3       	ldi	r22, 0x31	; 49
    1016:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'0');
    101a:	ce 01       	movw	r24, r28
    101c:	60 e3       	ldi	r22, 0x30	; 48
    101e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    1022:	0f c0       	rjmp	.+30     	; 0x1042 <uart_send_BIN4+0x264>
	case(15):
		uart_send_byte(which,'1');
    1024:	61 e3       	ldi	r22, 0x31	; 49
    1026:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
    102a:	ce 01       	movw	r24, r28
    102c:	61 e3       	ldi	r22, 0x31	; 49
    102e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
    1032:	ce 01       	movw	r24, r28
    1034:	61 e3       	ldi	r22, 0x31	; 49
    1036:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		uart_send_byte(which,'1');
    103a:	ce 01       	movw	r24, r28
    103c:	61 e3       	ldi	r22, 0x31	; 49
    103e:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
	}	
}
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

00001048 <uart_send_BIN8>:

//Sends out tosend as ASCII text in 'b01101010' format
void uart_send_BIN8(USART_t* which, uint8_t lowb){
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	ec 01       	movw	r28, r24
    1050:	16 2f       	mov	r17, r22
	uart_send_byte(which,'b');
    1052:	62 e6       	ldi	r22, 0x62	; 98
    1054:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
	uart_send_BIN4(which, lowb>>4);
    1058:	61 2f       	mov	r22, r17
    105a:	62 95       	swap	r22
    105c:	6f 70       	andi	r22, 0x0F	; 15
    105e:	ce 01       	movw	r24, r28
    1060:	0e 94 ef 06 	call	0xdde	; 0xdde <uart_send_BIN4>
	uart_send_BIN4(which, lowb & 0x0F);
    1064:	61 2f       	mov	r22, r17
    1066:	6f 70       	andi	r22, 0x0F	; 15
    1068:	ce 01       	movw	r24, r28
    106a:	0e 94 ef 06 	call	0xdde	; 0xdde <uart_send_BIN4>
}
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	08 95       	ret

00001076 <uart_send_HEX4>:
	
void uart_send_HEX4(USART_t* which, uint8_t lowb){
	switch(lowb){
    1076:	67 30       	cpi	r22, 0x07	; 7
    1078:	09 f4       	brne	.+2      	; 0x107c <uart_send_HEX4+0x6>
    107a:	3f c0       	rjmp	.+126    	; 0x10fa <uart_send_HEX4+0x84>
    107c:	68 30       	cpi	r22, 0x08	; 8
    107e:	70 f4       	brcc	.+28     	; 0x109c <uart_send_HEX4+0x26>
    1080:	63 30       	cpi	r22, 0x03	; 3
    1082:	59 f1       	breq	.+86     	; 0x10da <uart_send_HEX4+0x64>
    1084:	64 30       	cpi	r22, 0x04	; 4
    1086:	28 f4       	brcc	.+10     	; 0x1092 <uart_send_HEX4+0x1c>
    1088:	61 30       	cpi	r22, 0x01	; 1
    108a:	f9 f0       	breq	.+62     	; 0x10ca <uart_send_HEX4+0x54>
    108c:	62 30       	cpi	r22, 0x02	; 2
    108e:	08 f5       	brcc	.+66     	; 0x10d2 <uart_send_HEX4+0x5c>
    1090:	18 c0       	rjmp	.+48     	; 0x10c2 <uart_send_HEX4+0x4c>
    1092:	65 30       	cpi	r22, 0x05	; 5
    1094:	51 f1       	breq	.+84     	; 0x10ea <uart_send_HEX4+0x74>
    1096:	66 30       	cpi	r22, 0x06	; 6
    1098:	60 f5       	brcc	.+88     	; 0x10f2 <uart_send_HEX4+0x7c>
    109a:	23 c0       	rjmp	.+70     	; 0x10e2 <uart_send_HEX4+0x6c>
    109c:	6b 30       	cpi	r22, 0x0B	; 11
    109e:	e9 f1       	breq	.+122    	; 0x111a <uart_send_HEX4+0xa4>
    10a0:	6c 30       	cpi	r22, 0x0C	; 12
    10a2:	28 f4       	brcc	.+10     	; 0x10ae <uart_send_HEX4+0x38>
    10a4:	69 30       	cpi	r22, 0x09	; 9
    10a6:	89 f1       	breq	.+98     	; 0x110a <uart_send_HEX4+0x94>
    10a8:	6a 30       	cpi	r22, 0x0A	; 10
    10aa:	98 f5       	brcc	.+102    	; 0x1112 <uart_send_HEX4+0x9c>
    10ac:	2a c0       	rjmp	.+84     	; 0x1102 <uart_send_HEX4+0x8c>
    10ae:	6d 30       	cpi	r22, 0x0D	; 13
    10b0:	e1 f1       	breq	.+120    	; 0x112a <uart_send_HEX4+0xb4>
    10b2:	6d 30       	cpi	r22, 0x0D	; 13
    10b4:	b0 f1       	brcs	.+108    	; 0x1122 <uart_send_HEX4+0xac>
    10b6:	6e 30       	cpi	r22, 0x0E	; 14
    10b8:	e1 f1       	breq	.+120    	; 0x1132 <uart_send_HEX4+0xbc>
    10ba:	6f 30       	cpi	r22, 0x0F	; 15
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <uart_send_HEX4+0x4a>
    10be:	40 c0       	rjmp	.+128    	; 0x1140 <uart_send_HEX4+0xca>
    10c0:	3c c0       	rjmp	.+120    	; 0x113a <uart_send_HEX4+0xc4>
	case(0):
		uart_send_byte( which, '0');
    10c2:	60 e3       	ldi	r22, 0x30	; 48
    10c4:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    10c8:	08 95       	ret
	case(1):
		uart_send_byte( which, '1');
    10ca:	61 e3       	ldi	r22, 0x31	; 49
    10cc:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    10d0:	08 95       	ret
	case(2):
		uart_send_byte( which, '2');
    10d2:	62 e3       	ldi	r22, 0x32	; 50
    10d4:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    10d8:	08 95       	ret
	case(3):
		uart_send_byte( which, '3');
    10da:	63 e3       	ldi	r22, 0x33	; 51
    10dc:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    10e0:	08 95       	ret
	case(4):
		uart_send_byte( which, '4');
    10e2:	64 e3       	ldi	r22, 0x34	; 52
    10e4:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    10e8:	08 95       	ret
	case(5):
		uart_send_byte( which, '5');
    10ea:	65 e3       	ldi	r22, 0x35	; 53
    10ec:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    10f0:	08 95       	ret
	case(6):
		uart_send_byte( which, '6');
    10f2:	66 e3       	ldi	r22, 0x36	; 54
    10f4:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    10f8:	08 95       	ret
	case(7):
		uart_send_byte( which, '7');
    10fa:	67 e3       	ldi	r22, 0x37	; 55
    10fc:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    1100:	08 95       	ret
	case(8):
		uart_send_byte( which, '8');
    1102:	68 e3       	ldi	r22, 0x38	; 56
    1104:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    1108:	08 95       	ret
	case(9):
		uart_send_byte( which, '9');
    110a:	69 e3       	ldi	r22, 0x39	; 57
    110c:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    1110:	08 95       	ret
	case(10):
		uart_send_byte( which, 'A');
    1112:	61 e4       	ldi	r22, 0x41	; 65
    1114:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    1118:	08 95       	ret
	case(11):
		uart_send_byte( which, 'B');
    111a:	62 e4       	ldi	r22, 0x42	; 66
    111c:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    1120:	08 95       	ret
	case(12):
		uart_send_byte( which, 'C');
    1122:	63 e4       	ldi	r22, 0x43	; 67
    1124:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    1128:	08 95       	ret
	case(13):
		uart_send_byte( which, 'D');
    112a:	64 e4       	ldi	r22, 0x44	; 68
    112c:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    1130:	08 95       	ret
	case(14):
		uart_send_byte( which, 'E');
    1132:	65 e4       	ldi	r22, 0x45	; 69
    1134:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
		break;
    1138:	08 95       	ret
	case(15):
		uart_send_byte( which, 'F');
    113a:	66 e4       	ldi	r22, 0x46	; 70
    113c:	0e 94 be 06 	call	0xd7c	; 0xd7c <uart_send_byte>
    1140:	08 95       	ret

00001142 <uart_send_HEX8>:
		break;
	}	
}

void uart_send_HEX8(USART_t* which, uint8_t lowb){
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	ec 01       	movw	r28, r24
    114a:	16 2f       	mov	r17, r22
	uart_send_HEX4(which, lowb>>4);
    114c:	62 95       	swap	r22
    114e:	6f 70       	andi	r22, 0x0F	; 15
    1150:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_HEX4>
	uart_send_HEX4(which, lowb & 0x0F);
    1154:	61 2f       	mov	r22, r17
    1156:	6f 70       	andi	r22, 0x0F	; 15
    1158:	ce 01       	movw	r24, r28
    115a:	0e 94 3b 08 	call	0x1076	; 0x1076 <uart_send_HEX4>
}
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	08 95       	ret

00001166 <uart_send_HEX16b>:

void uart_send_HEX16b(USART_t* which, uint8_t highb, uint8_t lowb){
    1166:	1f 93       	push	r17
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	ec 01       	movw	r28, r24
    116e:	14 2f       	mov	r17, r20
	uart_send_HEX8(which, highb);
    1170:	0e 94 a1 08 	call	0x1142	; 0x1142 <uart_send_HEX8>
	uart_send_HEX8(which, lowb);
    1174:	ce 01       	movw	r24, r28
    1176:	61 2f       	mov	r22, r17
    1178:	0e 94 a1 08 	call	0x1142	; 0x1142 <uart_send_HEX8>
}
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	1f 91       	pop	r17
    1182:	08 95       	ret

00001184 <uart_send_HEX16>:

void uart_send_HEX16(USART_t* which, uint16_t highb){
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	ec 01       	movw	r28, r24
    118c:	16 2f       	mov	r17, r22
    118e:	67 2f       	mov	r22, r23
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_send_HEX8(which, blah);
    1190:	0e 94 a1 08 	call	0x1142	; 0x1142 <uart_send_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_send_HEX8(which, blah);
    1194:	ce 01       	movw	r24, r28
    1196:	61 2f       	mov	r22, r17
    1198:	0e 94 a1 08 	call	0x1142	; 0x1142 <uart_send_HEX8>
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	08 95       	ret

000011a4 <uart_enq_BIN4>:
//======================================================================


//Most Significant Bit first
void uart_enq_BIN4(uint8_t lowb){
	switch(lowb){
    11a4:	87 30       	cpi	r24, 0x07	; 7
    11a6:	09 f4       	brne	.+2      	; 0x11aa <uart_enq_BIN4+0x6>
    11a8:	87 c0       	rjmp	.+270    	; 0x12b8 <uart_enq_BIN4+0x114>
    11aa:	88 30       	cpi	r24, 0x08	; 8
    11ac:	88 f4       	brcc	.+34     	; 0x11d0 <uart_enq_BIN4+0x2c>
    11ae:	83 30       	cpi	r24, 0x03	; 3
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <uart_enq_BIN4+0x10>
    11b2:	4e c0       	rjmp	.+156    	; 0x1250 <uart_enq_BIN4+0xac>
    11b4:	84 30       	cpi	r24, 0x04	; 4
    11b6:	28 f4       	brcc	.+10     	; 0x11c2 <uart_enq_BIN4+0x1e>
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	81 f1       	breq	.+96     	; 0x121c <uart_enq_BIN4+0x78>
    11bc:	82 30       	cpi	r24, 0x02	; 2
    11be:	d8 f5       	brcc	.+118    	; 0x1236 <uart_enq_BIN4+0x92>
    11c0:	20 c0       	rjmp	.+64     	; 0x1202 <uart_enq_BIN4+0x5e>
    11c2:	85 30       	cpi	r24, 0x05	; 5
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <uart_enq_BIN4+0x24>
    11c6:	5e c0       	rjmp	.+188    	; 0x1284 <uart_enq_BIN4+0xe0>
    11c8:	86 30       	cpi	r24, 0x06	; 6
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <uart_enq_BIN4+0x2a>
    11cc:	68 c0       	rjmp	.+208    	; 0x129e <uart_enq_BIN4+0xfa>
    11ce:	4d c0       	rjmp	.+154    	; 0x126a <uart_enq_BIN4+0xc6>
    11d0:	8b 30       	cpi	r24, 0x0B	; 11
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <uart_enq_BIN4+0x32>
    11d4:	a5 c0       	rjmp	.+330    	; 0x1320 <uart_enq_BIN4+0x17c>
    11d6:	8c 30       	cpi	r24, 0x0C	; 12
    11d8:	38 f4       	brcc	.+14     	; 0x11e8 <uart_enq_BIN4+0x44>
    11da:	89 30       	cpi	r24, 0x09	; 9
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <uart_enq_BIN4+0x3c>
    11de:	86 c0       	rjmp	.+268    	; 0x12ec <uart_enq_BIN4+0x148>
    11e0:	8a 30       	cpi	r24, 0x0A	; 10
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <uart_enq_BIN4+0x42>
    11e4:	90 c0       	rjmp	.+288    	; 0x1306 <uart_enq_BIN4+0x162>
    11e6:	75 c0       	rjmp	.+234    	; 0x12d2 <uart_enq_BIN4+0x12e>
    11e8:	8d 30       	cpi	r24, 0x0D	; 13
    11ea:	09 f4       	brne	.+2      	; 0x11ee <uart_enq_BIN4+0x4a>
    11ec:	b3 c0       	rjmp	.+358    	; 0x1354 <uart_enq_BIN4+0x1b0>
    11ee:	8d 30       	cpi	r24, 0x0D	; 13
    11f0:	08 f4       	brcc	.+2      	; 0x11f4 <uart_enq_BIN4+0x50>
    11f2:	a3 c0       	rjmp	.+326    	; 0x133a <uart_enq_BIN4+0x196>
    11f4:	8e 30       	cpi	r24, 0x0E	; 14
    11f6:	09 f4       	brne	.+2      	; 0x11fa <uart_enq_BIN4+0x56>
    11f8:	ba c0       	rjmp	.+372    	; 0x136e <uart_enq_BIN4+0x1ca>
    11fa:	8f 30       	cpi	r24, 0x0F	; 15
    11fc:	09 f0       	breq	.+2      	; 0x1200 <uart_enq_BIN4+0x5c>
    11fe:	d0 c0       	rjmp	.+416    	; 0x13a0 <uart_enq_BIN4+0x1fc>
    1200:	c3 c0       	rjmp	.+390    	; 0x1388 <uart_enq_BIN4+0x1e4>
	case(0):
		uart_enqueue('0');
    1202:	80 e3       	ldi	r24, 0x30	; 48
    1204:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    1208:	80 e3       	ldi	r24, 0x30	; 48
    120a:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    120e:	80 e3       	ldi	r24, 0x30	; 48
    1210:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    1214:	80 e3       	ldi	r24, 0x30	; 48
    1216:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    121a:	08 95       	ret
	case(1):
		uart_enqueue('0');
    121c:	80 e3       	ldi	r24, 0x30	; 48
    121e:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    1222:	80 e3       	ldi	r24, 0x30	; 48
    1224:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    1228:	80 e3       	ldi	r24, 0x30	; 48
    122a:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    122e:	81 e3       	ldi	r24, 0x31	; 49
    1230:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    1234:	08 95       	ret
	case(2):
		uart_enqueue('0');
    1236:	80 e3       	ldi	r24, 0x30	; 48
    1238:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    123c:	80 e3       	ldi	r24, 0x30	; 48
    123e:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    1242:	81 e3       	ldi	r24, 0x31	; 49
    1244:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    1248:	80 e3       	ldi	r24, 0x30	; 48
    124a:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    124e:	08 95       	ret
	case(3):
		uart_enqueue('0');
    1250:	80 e3       	ldi	r24, 0x30	; 48
    1252:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    1256:	80 e3       	ldi	r24, 0x30	; 48
    1258:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    125c:	81 e3       	ldi	r24, 0x31	; 49
    125e:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    1262:	81 e3       	ldi	r24, 0x31	; 49
    1264:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    1268:	08 95       	ret
	case(4):
		uart_enqueue('0');
    126a:	80 e3       	ldi	r24, 0x30	; 48
    126c:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    1270:	81 e3       	ldi	r24, 0x31	; 49
    1272:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    1276:	80 e3       	ldi	r24, 0x30	; 48
    1278:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    127c:	80 e3       	ldi	r24, 0x30	; 48
    127e:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    1282:	08 95       	ret
	case(5):
		uart_enqueue('0');
    1284:	80 e3       	ldi	r24, 0x30	; 48
    1286:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    128a:	81 e3       	ldi	r24, 0x31	; 49
    128c:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    1290:	80 e3       	ldi	r24, 0x30	; 48
    1292:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    1296:	81 e3       	ldi	r24, 0x31	; 49
    1298:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    129c:	08 95       	ret
	case(6):
		uart_enqueue('0');
    129e:	80 e3       	ldi	r24, 0x30	; 48
    12a0:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    12a4:	81 e3       	ldi	r24, 0x31	; 49
    12a6:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    12aa:	81 e3       	ldi	r24, 0x31	; 49
    12ac:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    12b0:	80 e3       	ldi	r24, 0x30	; 48
    12b2:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    12b6:	08 95       	ret
	case(7):
		uart_enqueue('0');
    12b8:	80 e3       	ldi	r24, 0x30	; 48
    12ba:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    12be:	81 e3       	ldi	r24, 0x31	; 49
    12c0:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    12c4:	81 e3       	ldi	r24, 0x31	; 49
    12c6:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    12ca:	81 e3       	ldi	r24, 0x31	; 49
    12cc:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    12d0:	08 95       	ret
	case(8):
		uart_enqueue('1');
    12d2:	81 e3       	ldi	r24, 0x31	; 49
    12d4:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    12d8:	80 e3       	ldi	r24, 0x30	; 48
    12da:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    12de:	80 e3       	ldi	r24, 0x30	; 48
    12e0:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    12e4:	80 e3       	ldi	r24, 0x30	; 48
    12e6:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    12ea:	08 95       	ret
	case(9):
		uart_enqueue('1');
    12ec:	81 e3       	ldi	r24, 0x31	; 49
    12ee:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    12f2:	80 e3       	ldi	r24, 0x30	; 48
    12f4:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    12f8:	80 e3       	ldi	r24, 0x30	; 48
    12fa:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    12fe:	81 e3       	ldi	r24, 0x31	; 49
    1300:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    1304:	08 95       	ret
	case(10):
		uart_enqueue('1');
    1306:	81 e3       	ldi	r24, 0x31	; 49
    1308:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    130c:	80 e3       	ldi	r24, 0x30	; 48
    130e:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    1312:	81 e3       	ldi	r24, 0x31	; 49
    1314:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    1318:	80 e3       	ldi	r24, 0x30	; 48
    131a:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    131e:	08 95       	ret
	case(11):
		uart_enqueue('1');
    1320:	81 e3       	ldi	r24, 0x31	; 49
    1322:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    1326:	80 e3       	ldi	r24, 0x30	; 48
    1328:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    132c:	81 e3       	ldi	r24, 0x31	; 49
    132e:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    1332:	81 e3       	ldi	r24, 0x31	; 49
    1334:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    1338:	08 95       	ret
	case(12):
		uart_enqueue('1');
    133a:	81 e3       	ldi	r24, 0x31	; 49
    133c:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    1340:	81 e3       	ldi	r24, 0x31	; 49
    1342:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    1346:	80 e3       	ldi	r24, 0x30	; 48
    1348:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    134c:	80 e3       	ldi	r24, 0x30	; 48
    134e:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    1352:	08 95       	ret
	case(13):
		uart_enqueue('1');
    1354:	81 e3       	ldi	r24, 0x31	; 49
    1356:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    135a:	81 e3       	ldi	r24, 0x31	; 49
    135c:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    1360:	80 e3       	ldi	r24, 0x30	; 48
    1362:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    1366:	81 e3       	ldi	r24, 0x31	; 49
    1368:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    136c:	08 95       	ret
	case(14):
		uart_enqueue('1');
    136e:	81 e3       	ldi	r24, 0x31	; 49
    1370:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    1374:	81 e3       	ldi	r24, 0x31	; 49
    1376:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    137a:	81 e3       	ldi	r24, 0x31	; 49
    137c:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('0');
    1380:	80 e3       	ldi	r24, 0x30	; 48
    1382:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    1386:	08 95       	ret
	case(15):
		uart_enqueue('1');
    1388:	81 e3       	ldi	r24, 0x31	; 49
    138a:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    138e:	81 e3       	ldi	r24, 0x31	; 49
    1390:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    1394:	81 e3       	ldi	r24, 0x31	; 49
    1396:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		uart_enqueue('1');
    139a:	81 e3       	ldi	r24, 0x31	; 49
    139c:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
    13a0:	08 95       	ret

000013a2 <uart_enq_BIN8>:
		break;
	}	
}

//enqs out toenq as ASCII text in 'b01101010' format
void uart_enq_BIN8(uint8_t lowb){
    13a2:	cf 93       	push	r28
    13a4:	c8 2f       	mov	r28, r24
	uart_enqueue('b');
    13a6:	82 e6       	ldi	r24, 0x62	; 98
    13a8:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
	uart_enq_BIN4(lowb>>4);
    13ac:	8c 2f       	mov	r24, r28
    13ae:	82 95       	swap	r24
    13b0:	8f 70       	andi	r24, 0x0F	; 15
    13b2:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <uart_enq_BIN4>
	uart_enq_BIN4(lowb & 0x0F);
    13b6:	8c 2f       	mov	r24, r28
    13b8:	8f 70       	andi	r24, 0x0F	; 15
    13ba:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <uart_enq_BIN4>
}
    13be:	cf 91       	pop	r28
    13c0:	08 95       	ret

000013c2 <uart_enq_HEX4>:
	

void uart_enq_HEX4(uint8_t lowb){
	switch(lowb){
    13c2:	87 30       	cpi	r24, 0x07	; 7
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <uart_enq_HEX4+0x6>
    13c6:	3f c0       	rjmp	.+126    	; 0x1446 <uart_enq_HEX4+0x84>
    13c8:	88 30       	cpi	r24, 0x08	; 8
    13ca:	70 f4       	brcc	.+28     	; 0x13e8 <uart_enq_HEX4+0x26>
    13cc:	83 30       	cpi	r24, 0x03	; 3
    13ce:	59 f1       	breq	.+86     	; 0x1426 <uart_enq_HEX4+0x64>
    13d0:	84 30       	cpi	r24, 0x04	; 4
    13d2:	28 f4       	brcc	.+10     	; 0x13de <uart_enq_HEX4+0x1c>
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	f9 f0       	breq	.+62     	; 0x1416 <uart_enq_HEX4+0x54>
    13d8:	82 30       	cpi	r24, 0x02	; 2
    13da:	08 f5       	brcc	.+66     	; 0x141e <uart_enq_HEX4+0x5c>
    13dc:	18 c0       	rjmp	.+48     	; 0x140e <uart_enq_HEX4+0x4c>
    13de:	85 30       	cpi	r24, 0x05	; 5
    13e0:	51 f1       	breq	.+84     	; 0x1436 <uart_enq_HEX4+0x74>
    13e2:	86 30       	cpi	r24, 0x06	; 6
    13e4:	60 f5       	brcc	.+88     	; 0x143e <uart_enq_HEX4+0x7c>
    13e6:	23 c0       	rjmp	.+70     	; 0x142e <uart_enq_HEX4+0x6c>
    13e8:	8b 30       	cpi	r24, 0x0B	; 11
    13ea:	e9 f1       	breq	.+122    	; 0x1466 <uart_enq_HEX4+0xa4>
    13ec:	8c 30       	cpi	r24, 0x0C	; 12
    13ee:	28 f4       	brcc	.+10     	; 0x13fa <uart_enq_HEX4+0x38>
    13f0:	89 30       	cpi	r24, 0x09	; 9
    13f2:	89 f1       	breq	.+98     	; 0x1456 <uart_enq_HEX4+0x94>
    13f4:	8a 30       	cpi	r24, 0x0A	; 10
    13f6:	98 f5       	brcc	.+102    	; 0x145e <uart_enq_HEX4+0x9c>
    13f8:	2a c0       	rjmp	.+84     	; 0x144e <uart_enq_HEX4+0x8c>
    13fa:	8d 30       	cpi	r24, 0x0D	; 13
    13fc:	e1 f1       	breq	.+120    	; 0x1476 <uart_enq_HEX4+0xb4>
    13fe:	8d 30       	cpi	r24, 0x0D	; 13
    1400:	b0 f1       	brcs	.+108    	; 0x146e <uart_enq_HEX4+0xac>
    1402:	8e 30       	cpi	r24, 0x0E	; 14
    1404:	e1 f1       	breq	.+120    	; 0x147e <uart_enq_HEX4+0xbc>
    1406:	8f 30       	cpi	r24, 0x0F	; 15
    1408:	09 f0       	breq	.+2      	; 0x140c <uart_enq_HEX4+0x4a>
    140a:	40 c0       	rjmp	.+128    	; 0x148c <uart_enq_HEX4+0xca>
    140c:	3c c0       	rjmp	.+120    	; 0x1486 <uart_enq_HEX4+0xc4>
	case(0):
		uart_enqueue( '0');
    140e:	80 e3       	ldi	r24, 0x30	; 48
    1410:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    1414:	08 95       	ret
	case(1):
		uart_enqueue( '1');
    1416:	81 e3       	ldi	r24, 0x31	; 49
    1418:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    141c:	08 95       	ret
	case(2):
		uart_enqueue( '2');
    141e:	82 e3       	ldi	r24, 0x32	; 50
    1420:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    1424:	08 95       	ret
	case(3):
		uart_enqueue( '3');
    1426:	83 e3       	ldi	r24, 0x33	; 51
    1428:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    142c:	08 95       	ret
	case(4):
		uart_enqueue( '4');
    142e:	84 e3       	ldi	r24, 0x34	; 52
    1430:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    1434:	08 95       	ret
	case(5):
		uart_enqueue( '5');
    1436:	85 e3       	ldi	r24, 0x35	; 53
    1438:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    143c:	08 95       	ret
	case(6):
		uart_enqueue( '6');
    143e:	86 e3       	ldi	r24, 0x36	; 54
    1440:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    1444:	08 95       	ret
	case(7):
		uart_enqueue( '7');
    1446:	87 e3       	ldi	r24, 0x37	; 55
    1448:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    144c:	08 95       	ret
	case(8):
		uart_enqueue( '8');
    144e:	88 e3       	ldi	r24, 0x38	; 56
    1450:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    1454:	08 95       	ret
	case(9):
		uart_enqueue( '9');
    1456:	89 e3       	ldi	r24, 0x39	; 57
    1458:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    145c:	08 95       	ret
	case(10):
		uart_enqueue( 'A');
    145e:	81 e4       	ldi	r24, 0x41	; 65
    1460:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    1464:	08 95       	ret
	case(11):
		uart_enqueue( 'B');
    1466:	82 e4       	ldi	r24, 0x42	; 66
    1468:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    146c:	08 95       	ret
	case(12):
		uart_enqueue( 'C');
    146e:	83 e4       	ldi	r24, 0x43	; 67
    1470:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    1474:	08 95       	ret
	case(13):
		uart_enqueue( 'D');
    1476:	84 e4       	ldi	r24, 0x44	; 68
    1478:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    147c:	08 95       	ret
	case(14):
		uart_enqueue( 'E');
    147e:	85 e4       	ldi	r24, 0x45	; 69
    1480:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
		break;
    1484:	08 95       	ret
	case(15):
		uart_enqueue( 'F');
    1486:	86 e4       	ldi	r24, 0x46	; 70
    1488:	0e 94 6d 0c 	call	0x18da	; 0x18da <uart_enqueue>
    148c:	08 95       	ret

0000148e <uart_enq_HEX8>:
		break;
	}	
}

void uart_enq_HEX8(uint8_t lowb){
    148e:	cf 93       	push	r28
    1490:	c8 2f       	mov	r28, r24
	uart_enq_HEX4(lowb>>4);
    1492:	82 95       	swap	r24
    1494:	8f 70       	andi	r24, 0x0F	; 15
    1496:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <uart_enq_HEX4>
	uart_enq_HEX4(lowb & 0x0F);
    149a:	8c 2f       	mov	r24, r28
    149c:	8f 70       	andi	r24, 0x0F	; 15
    149e:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <uart_enq_HEX4>
}
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <uart_enq_HEX16b>:

void uart_enq_HEX16b(uint8_t highb, uint8_t lowb){
    14a6:	cf 93       	push	r28
    14a8:	c6 2f       	mov	r28, r22
	uart_enq_HEX8(highb);
    14aa:	0e 94 47 0a 	call	0x148e	; 0x148e <uart_enq_HEX8>
	uart_enq_HEX8(lowb);
    14ae:	8c 2f       	mov	r24, r28
    14b0:	0e 94 47 0a 	call	0x148e	; 0x148e <uart_enq_HEX8>
}
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <uart_enq_HEX16>:

void uart_enq_HEX16(uint16_t highb){
    14b8:	cf 93       	push	r28
    14ba:	c8 2f       	mov	r28, r24
	uint8_t blah;
	blah = (uint8_t)(highb>>8);
	uart_enq_HEX8(blah);
    14bc:	89 2f       	mov	r24, r25
    14be:	0e 94 47 0a 	call	0x148e	; 0x148e <uart_enq_HEX8>
	blah = (uint8_t)(highb & 0x00FF);
	uart_enq_HEX8(blah);
    14c2:	8c 2f       	mov	r24, r28
    14c4:	0e 94 47 0a 	call	0x148e	; 0x148e <uart_enq_HEX8>
}
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <__vector_58>:
SIGNAL(USARTE0_DRE_vect){
	uart_transmit();	
}

//INCOMING DATA INTERRUPT
SIGNAL(USARTE0_RXC_vect){
    14cc:	1f 92       	push	r1
    14ce:	0f 92       	push	r0
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	0f 92       	push	r0
    14d4:	11 24       	eor	r1, r1
    14d6:	2f 93       	push	r18
    14d8:	3f 93       	push	r19
    14da:	8f 93       	push	r24
    14dc:	9f 93       	push	r25
    14de:	af 93       	push	r26
    14e0:	bf 93       	push	r27
    14e2:	ef 93       	push	r30
    14e4:	ff 93       	push	r31
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    14e6:	e0 91 24 22 	lds	r30, 0x2224
    14ea:	f0 91 25 22 	lds	r31, 0x2225
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
	}
}

inline void uart_ienqueue(uint8_t datain){
	uart_ibuffer[uart_ihead] = datain;
    14ee:	8e e1       	ldi	r24, 0x1E	; 30
    14f0:	90 e2       	ldi	r25, 0x20	; 32
    14f2:	12 c0       	rjmp	.+36     	; 0x1518 <__vector_58+0x4c>
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
		incomingByte = port->DATA;
    14f4:	20 81       	ld	r18, Z
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
	}
}

inline void uart_ienqueue(uint8_t datain){
	uart_ibuffer[uart_ihead] = datain;
    14f6:	30 91 20 22 	lds	r19, 0x2220
    14fa:	dc 01       	movw	r26, r24
    14fc:	a3 0f       	add	r26, r19
    14fe:	b1 1d       	adc	r27, r1
    1500:	2c 93       	st	X, r18
	uart_ihead++;
    1502:	20 91 20 22 	lds	r18, 0x2220
    1506:	2f 5f       	subi	r18, 0xFF	; 255
    1508:	20 93 20 22 	sts	0x2220, r18
	if (uart_ihead >= MAX_IBUFFER_LEN){
    150c:	20 91 20 22 	lds	r18, 0x2220
    1510:	2a 3f       	cpi	r18, 0xFA	; 250
    1512:	10 f0       	brcs	.+4      	; 0x1518 <__vector_58+0x4c>
		uart_ihead = 0;
    1514:	10 92 20 22 	sts	0x2220, r1
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    1518:	21 81       	ldd	r18, Z+1	; 0x01
    151a:	22 23       	and	r18, r18
    151c:	a4 f4       	brge	.+40     	; 0x1546 <__vector_58+0x7a>
	uart_ihead = 0;
	uart_itail = 0;
}

inline uint8_t uart_icount(void){
	if (uart_ihead >= uart_itail){	
    151e:	30 91 20 22 	lds	r19, 0x2220
    1522:	20 91 1d 20 	lds	r18, 0x201D
    1526:	32 17       	cp	r19, r18
    1528:	30 f0       	brcs	.+12     	; 0x1536 <__vector_58+0x6a>
		return (uart_ihead - uart_itail);
    152a:	20 91 20 22 	lds	r18, 0x2220
    152e:	30 91 1d 20 	lds	r19, 0x201D
    1532:	23 1b       	sub	r18, r19
    1534:	06 c0       	rjmp	.+12     	; 0x1542 <__vector_58+0x76>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
    1536:	20 91 20 22 	lds	r18, 0x2220
    153a:	30 91 1d 20 	lds	r19, 0x201D
    153e:	26 50       	subi	r18, 0x06	; 6
    1540:	23 1b       	sub	r18, r19
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    1542:	2a 3f       	cpi	r18, 0xFA	; 250
    1544:	b8 f2       	brcs	.-82     	; 0x14f4 <__vector_58+0x28>
}

//INCOMING DATA INTERRUPT
SIGNAL(USARTE0_RXC_vect){
	uart_receive();
}
    1546:	ff 91       	pop	r31
    1548:	ef 91       	pop	r30
    154a:	bf 91       	pop	r27
    154c:	af 91       	pop	r26
    154e:	9f 91       	pop	r25
    1550:	8f 91       	pop	r24
    1552:	3f 91       	pop	r19
    1554:	2f 91       	pop	r18
    1556:	0f 90       	pop	r0
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	0f 90       	pop	r0
    155c:	1f 90       	pop	r1
    155e:	18 95       	reti

00001560 <uart_rxbuffer_enable>:
		uart_txbuffer_enable();		
}

//Enable Receive Complete (high priority) -- so incoming is always handled first
void uart_rxbuffer_enable(){
	port->CTRLA = (port->CTRLA | B8(00110000));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    1560:	e0 91 24 22 	lds	r30, 0x2224
    1564:	f0 91 25 22 	lds	r31, 0x2225
    1568:	83 81       	ldd	r24, Z+3	; 0x03
    156a:	80 63       	ori	r24, 0x30	; 48
    156c:	83 83       	std	Z+3, r24	; 0x03
}
    156e:	08 95       	ret

00001570 <uart_rxbuffer_disable>:

void uart_rxbuffer_disable(){
	port->CTRLA = (port->CTRLA & B8(11001111));	//Disable the Data Register Empty Interrupt
    1570:	e0 91 24 22 	lds	r30, 0x2224
    1574:	f0 91 25 22 	lds	r31, 0x2225
    1578:	83 81       	ldd	r24, Z+3	; 0x03
    157a:	8f 7c       	andi	r24, 0xCF	; 207
    157c:	83 83       	std	Z+3, r24	; 0x03
}
    157e:	08 95       	ret

00001580 <uart_txbuffer_enable>:

//Enable Transmit Ready (med priority) 
void uart_txbuffer_enable(){
	port->CTRLA = (port->CTRLA | B8(00000010));	//Set the Data Register Empty Interrupt to Medium Priority (timer needs to be higher!)
    1580:	e0 91 24 22 	lds	r30, 0x2224
    1584:	f0 91 25 22 	lds	r31, 0x2225
    1588:	83 81       	ldd	r24, Z+3	; 0x03
    158a:	82 60       	ori	r24, 0x02	; 2
    158c:	83 83       	std	Z+3, r24	; 0x03
}
    158e:	08 95       	ret

00001590 <uart_txbuffer_disable>:

void uart_txbuffer_disable(){
	port->CTRLA = (port->CTRLA & B8(11111100));	//Disable the Data Register Empty Interrupt
    1590:	e0 91 24 22 	lds	r30, 0x2224
    1594:	f0 91 25 22 	lds	r31, 0x2225
    1598:	83 81       	ldd	r24, Z+3	; 0x03
    159a:	8c 7f       	andi	r24, 0xFC	; 252
    159c:	83 83       	std	Z+3, r24	; 0x03
}
    159e:	08 95       	ret

000015a0 <__vector_59>:
//** [PORT SPECIFIC CODE] -- CURRENTLY TUNED TO UART F1
//************************************************************************
//************************************************************************

//DATA TRANSMIT COMPLETE
SIGNAL(USARTE0_DRE_vect){
    15a0:	1f 92       	push	r1
    15a2:	0f 92       	push	r0
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1
    15aa:	2f 93       	push	r18
    15ac:	3f 93       	push	r19
    15ae:	4f 93       	push	r20
    15b0:	5f 93       	push	r21
    15b2:	6f 93       	push	r22
    15b4:	7f 93       	push	r23
    15b6:	8f 93       	push	r24
    15b8:	9f 93       	push	r25
    15ba:	af 93       	push	r26
    15bc:	bf 93       	push	r27
    15be:	ef 93       	push	r30
    15c0:	ff 93       	push	r31
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    15c2:	e0 91 24 22 	lds	r30, 0x2224
    15c6:	f0 91 25 22 	lds	r31, 0x2225
    15ca:	81 81       	ldd	r24, Z+1	; 0x01
    15cc:	85 fd       	sbrc	r24, 5
    15ce:	1b c0       	rjmp	.+54     	; 0x1606 <__vector_59+0x66>
    15d0:	30 c0       	rjmp	.+96     	; 0x1632 <__vector_59+0x92>
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    15d2:	20 91 21 22 	lds	r18, 0x2221
	uart_tail++;
    15d6:	30 91 21 22 	lds	r19, 0x2221
    15da:	3f 5f       	subi	r19, 0xFF	; 255
    15dc:	30 93 21 22 	sts	0x2221, r19
	if (uart_tail >= MAX_BUFFER_LEN){
    15e0:	30 91 21 22 	lds	r19, 0x2221
    15e4:	3a 3f       	cpi	r19, 0xFA	; 250
    15e6:	10 f0       	brcs	.+4      	; 0x15ec <__vector_59+0x4c>
		uart_tail = 0;
    15e8:	10 92 21 22 	sts	0x2221, r1
	}
	return uart_buffer[oldtail];
    15ec:	dc 01       	movw	r26, r24
    15ee:	a2 0f       	add	r26, r18
    15f0:	b1 1d       	adc	r27, r1
    15f2:	2c 91       	ld	r18, X
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		toSend = uart_dequeue();
		port->DATA = toSend;
    15f4:	20 83       	st	Z, r18
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    15f6:	e0 91 24 22 	lds	r30, 0x2224
    15fa:	f0 91 25 22 	lds	r31, 0x2225
    15fe:	21 81       	ldd	r18, Z+1	; 0x01
    1600:	25 fd       	sbrc	r18, 5
    1602:	03 c0       	rjmp	.+6      	; 0x160a <__vector_59+0x6a>
    1604:	16 c0       	rjmp	.+44     	; 0x1632 <__vector_59+0x92>
	oldtail = uart_tail;
	uart_tail++;
	if (uart_tail >= MAX_BUFFER_LEN){
		uart_tail = 0;
	}
	return uart_buffer[oldtail];
    1606:	86 e2       	ldi	r24, 0x26	; 38
    1608:	91 e2       	ldi	r25, 0x21	; 33
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    160a:	30 91 25 21 	lds	r19, 0x2125
    160e:	20 91 21 22 	lds	r18, 0x2221
    1612:	32 17       	cp	r19, r18
    1614:	30 f0       	brcs	.+12     	; 0x1622 <__vector_59+0x82>
		return (uart_head - uart_tail);
    1616:	20 91 25 21 	lds	r18, 0x2125
    161a:	30 91 21 22 	lds	r19, 0x2221
    161e:	23 1b       	sub	r18, r19
    1620:	06 c0       	rjmp	.+12     	; 0x162e <__vector_59+0x8e>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    1622:	20 91 25 21 	lds	r18, 0x2125
    1626:	30 91 21 22 	lds	r19, 0x2221
    162a:	26 50       	subi	r18, 0x06	; 6
    162c:	23 1b       	sub	r18, r19
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    162e:	22 23       	and	r18, r18
    1630:	81 f6       	brne	.-96     	; 0x15d2 <__vector_59+0x32>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    1632:	90 91 25 21 	lds	r25, 0x2125
    1636:	80 91 21 22 	lds	r24, 0x2221
    163a:	98 17       	cp	r25, r24
    163c:	30 f0       	brcs	.+12     	; 0x164a <__vector_59+0xaa>
		return (uart_head - uart_tail);
    163e:	80 91 25 21 	lds	r24, 0x2125
    1642:	90 91 21 22 	lds	r25, 0x2221
    1646:	89 1b       	sub	r24, r25
    1648:	06 c0       	rjmp	.+12     	; 0x1656 <__vector_59+0xb6>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    164a:	80 91 25 21 	lds	r24, 0x2125
    164e:	90 91 21 22 	lds	r25, 0x2221
    1652:	86 50       	subi	r24, 0x06	; 6
    1654:	89 1b       	sub	r24, r25
		toSend = uart_dequeue();
		port->DATA = toSend;
	}

	//else: wait for the next tx complete to empty out the data register
	if(uart_count()>0) uart_txbuffer_enable();
    1656:	88 23       	and	r24, r24
    1658:	19 f0       	breq	.+6      	; 0x1660 <__vector_59+0xc0>
    165a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart_txbuffer_enable>
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <__vector_59+0xc4>
	else uart_txbuffer_disable();
    1660:	0e 94 c8 0a 	call	0x1590	; 0x1590 <uart_txbuffer_disable>
//************************************************************************

//DATA TRANSMIT COMPLETE
SIGNAL(USARTE0_DRE_vect){
	uart_transmit();	
}
    1664:	ff 91       	pop	r31
    1666:	ef 91       	pop	r30
    1668:	bf 91       	pop	r27
    166a:	af 91       	pop	r26
    166c:	9f 91       	pop	r25
    166e:	8f 91       	pop	r24
    1670:	7f 91       	pop	r23
    1672:	6f 91       	pop	r22
    1674:	5f 91       	pop	r21
    1676:	4f 91       	pop	r20
    1678:	3f 91       	pop	r19
    167a:	2f 91       	pop	r18
    167c:	0f 90       	pop	r0
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	0f 90       	pop	r0
    1682:	1f 90       	pop	r1
    1684:	18 95       	reti

00001686 <uart_transmit>:
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1686:	e0 91 24 22 	lds	r30, 0x2224
    168a:	f0 91 25 22 	lds	r31, 0x2225
    168e:	81 81       	ldd	r24, Z+1	; 0x01
    1690:	85 fd       	sbrc	r24, 5
    1692:	1b c0       	rjmp	.+54     	; 0x16ca <uart_transmit+0x44>
    1694:	30 c0       	rjmp	.+96     	; 0x16f6 <uart_transmit+0x70>
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    1696:	20 91 21 22 	lds	r18, 0x2221
	uart_tail++;
    169a:	30 91 21 22 	lds	r19, 0x2221
    169e:	3f 5f       	subi	r19, 0xFF	; 255
    16a0:	30 93 21 22 	sts	0x2221, r19
	if (uart_tail >= MAX_BUFFER_LEN){
    16a4:	30 91 21 22 	lds	r19, 0x2221
    16a8:	3a 3f       	cpi	r19, 0xFA	; 250
    16aa:	10 f0       	brcs	.+4      	; 0x16b0 <uart_transmit+0x2a>
		uart_tail = 0;
    16ac:	10 92 21 22 	sts	0x2221, r1
	}
	return uart_buffer[oldtail];
    16b0:	dc 01       	movw	r26, r24
    16b2:	a2 0f       	add	r26, r18
    16b4:	b1 1d       	adc	r27, r1
    16b6:	2c 91       	ld	r18, X
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		toSend = uart_dequeue();
		port->DATA = toSend;
    16b8:	20 83       	st	Z, r18
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    16ba:	e0 91 24 22 	lds	r30, 0x2224
    16be:	f0 91 25 22 	lds	r31, 0x2225
    16c2:	21 81       	ldd	r18, Z+1	; 0x01
    16c4:	25 fd       	sbrc	r18, 5
    16c6:	03 c0       	rjmp	.+6      	; 0x16ce <uart_transmit+0x48>
    16c8:	16 c0       	rjmp	.+44     	; 0x16f6 <uart_transmit+0x70>
	oldtail = uart_tail;
	uart_tail++;
	if (uart_tail >= MAX_BUFFER_LEN){
		uart_tail = 0;
	}
	return uart_buffer[oldtail];
    16ca:	86 e2       	ldi	r24, 0x26	; 38
    16cc:	91 e2       	ldi	r25, 0x21	; 33
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    16ce:	30 91 25 21 	lds	r19, 0x2125
    16d2:	20 91 21 22 	lds	r18, 0x2221
    16d6:	32 17       	cp	r19, r18
    16d8:	30 f0       	brcs	.+12     	; 0x16e6 <uart_transmit+0x60>
		return (uart_head - uart_tail);
    16da:	20 91 25 21 	lds	r18, 0x2125
    16de:	30 91 21 22 	lds	r19, 0x2221
    16e2:	23 1b       	sub	r18, r19
    16e4:	06 c0       	rjmp	.+12     	; 0x16f2 <uart_transmit+0x6c>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    16e6:	20 91 25 21 	lds	r18, 0x2125
    16ea:	30 91 21 22 	lds	r19, 0x2221
    16ee:	26 50       	subi	r18, 0x06	; 6
    16f0:	23 1b       	sub	r18, r19
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    16f2:	22 23       	and	r18, r18
    16f4:	81 f6       	brne	.-96     	; 0x1696 <uart_transmit+0x10>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    16f6:	90 91 25 21 	lds	r25, 0x2125
    16fa:	80 91 21 22 	lds	r24, 0x2221
    16fe:	98 17       	cp	r25, r24
    1700:	30 f0       	brcs	.+12     	; 0x170e <uart_transmit+0x88>
		return (uart_head - uart_tail);
    1702:	80 91 25 21 	lds	r24, 0x2125
    1706:	90 91 21 22 	lds	r25, 0x2221
    170a:	89 1b       	sub	r24, r25
    170c:	06 c0       	rjmp	.+12     	; 0x171a <uart_transmit+0x94>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    170e:	80 91 25 21 	lds	r24, 0x2125
    1712:	90 91 21 22 	lds	r25, 0x2221
    1716:	86 50       	subi	r24, 0x06	; 6
    1718:	89 1b       	sub	r24, r25
		toSend = uart_dequeue();
		port->DATA = toSend;
	}

	//else: wait for the next tx complete to empty out the data register
	if(uart_count()>0) uart_txbuffer_enable();
    171a:	88 23       	and	r24, r24
    171c:	19 f0       	breq	.+6      	; 0x1724 <uart_transmit+0x9e>
    171e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart_txbuffer_enable>
    1722:	08 95       	ret
	else uart_txbuffer_disable();
    1724:	0e 94 c8 0a 	call	0x1590	; 0x1590 <uart_txbuffer_disable>
    1728:	08 95       	ret

0000172a <uart_receive>:
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    172a:	e0 91 24 22 	lds	r30, 0x2224
    172e:	f0 91 25 22 	lds	r31, 0x2225
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
	}
}

inline void uart_ienqueue(uint8_t datain){
	uart_ibuffer[uart_ihead] = datain;
    1732:	8e e1       	ldi	r24, 0x1E	; 30
    1734:	90 e2       	ldi	r25, 0x20	; 32
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    1736:	12 c0       	rjmp	.+36     	; 0x175c <uart_receive+0x32>
		incomingByte = port->DATA;
    1738:	20 81       	ld	r18, Z
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
	}
}

inline void uart_ienqueue(uint8_t datain){
	uart_ibuffer[uart_ihead] = datain;
    173a:	30 91 20 22 	lds	r19, 0x2220
    173e:	dc 01       	movw	r26, r24
    1740:	a3 0f       	add	r26, r19
    1742:	b1 1d       	adc	r27, r1
    1744:	2c 93       	st	X, r18
	uart_ihead++;
    1746:	20 91 20 22 	lds	r18, 0x2220
    174a:	2f 5f       	subi	r18, 0xFF	; 255
    174c:	20 93 20 22 	sts	0x2220, r18
	if (uart_ihead >= MAX_IBUFFER_LEN){
    1750:	20 91 20 22 	lds	r18, 0x2220
    1754:	2a 3f       	cpi	r18, 0xFA	; 250
    1756:	10 f0       	brcs	.+4      	; 0x175c <uart_receive+0x32>
		uart_ihead = 0;
    1758:	10 92 20 22 	sts	0x2220, r1
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    175c:	21 81       	ldd	r18, Z+1	; 0x01
    175e:	22 23       	and	r18, r18
    1760:	a4 f4       	brge	.+40     	; 0x178a <uart_receive+0x60>
	uart_ihead = 0;
	uart_itail = 0;
}

inline uint8_t uart_icount(void){
	if (uart_ihead >= uart_itail){	
    1762:	30 91 20 22 	lds	r19, 0x2220
    1766:	20 91 1d 20 	lds	r18, 0x201D
    176a:	32 17       	cp	r19, r18
    176c:	30 f0       	brcs	.+12     	; 0x177a <uart_receive+0x50>
		return (uart_ihead - uart_itail);
    176e:	20 91 20 22 	lds	r18, 0x2220
    1772:	30 91 1d 20 	lds	r19, 0x201D
    1776:	23 1b       	sub	r18, r19
    1778:	06 c0       	rjmp	.+12     	; 0x1786 <uart_receive+0x5c>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
    177a:	20 91 20 22 	lds	r18, 0x2220
    177e:	30 91 1d 20 	lds	r19, 0x201D
    1782:	26 50       	subi	r18, 0x06	; 6
    1784:	23 1b       	sub	r18, r19
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_receive(){
	uint8_t incomingByte;
	//keep receiving until data register is empty or incoming queue is full
	while (((port->STATUS & _BV(7)) == B8(10000000)) && (uart_icount() < MAX_IBUFFER_LEN)){
    1786:	2a 3f       	cpi	r18, 0xFA	; 250
    1788:	b8 f2       	brcs	.-82     	; 0x1738 <uart_receive+0xe>
    178a:	08 95       	ret

0000178c <init_uart_obuffer>:
/** Insert from head. Read from tail. The goal is to be fast (very fast) and light.
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_obuffer(void){
	uart_head = 0;
    178c:	10 92 25 21 	sts	0x2125, r1
	uart_tail = 0;
    1790:	10 92 21 22 	sts	0x2221, r1
}
    1794:	08 95       	ret

00001796 <uart_count>:

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    1796:	90 91 25 21 	lds	r25, 0x2125
    179a:	80 91 21 22 	lds	r24, 0x2221
    179e:	98 17       	cp	r25, r24
    17a0:	30 f0       	brcs	.+12     	; 0x17ae <uart_count+0x18>
		return (uart_head - uart_tail);
    17a2:	80 91 25 21 	lds	r24, 0x2125
    17a6:	90 91 21 22 	lds	r25, 0x2221
    17aa:	89 1b       	sub	r24, r25
    17ac:	08 95       	ret
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    17ae:	80 91 25 21 	lds	r24, 0x2125
    17b2:	90 91 21 22 	lds	r25, 0x2221
    17b6:	86 50       	subi	r24, 0x06	; 6
    17b8:	89 1b       	sub	r24, r25
	}
}
    17ba:	08 95       	ret

000017bc <uart_enqueue_string>:

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(char* string_in){
    17bc:	cf 92       	push	r12
    17be:	df 92       	push	r13
    17c0:	ef 92       	push	r14
    17c2:	ff 92       	push	r15
    17c4:	0f 93       	push	r16
    17c6:	1f 93       	push	r17
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
	uint16_t length = (uint16_t)strlen(string_in);
    17cc:	e8 2f       	mov	r30, r24
    17ce:	f9 2f       	mov	r31, r25
    17d0:	df 01       	movw	r26, r30
    17d2:	0d 90       	ld	r0, X+
    17d4:	00 20       	and	r0, r0
    17d6:	e9 f7       	brne	.-6      	; 0x17d2 <uart_enqueue_string+0x16>
    17d8:	11 97       	sbiw	r26, 0x01	; 1
    17da:	6d 01       	movw	r12, r26
    17dc:	ce 1a       	sub	r12, r30
    17de:	df 0a       	sbc	r13, r31
	for (uint16_t i=0; i<length; i++){uart_enqueue((uint8_t)string_in[i]);}	
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <uart_enqueue_string+0x28>
    17e2:	72 c0       	rjmp	.+228    	; 0x18c8 <uart_enqueue_string+0x10c>
    17e4:	e8 2e       	mov	r14, r24
    17e6:	f9 2e       	mov	r15, r25
    17e8:	00 e0       	ldi	r16, 0x00	; 0
    17ea:	10 e0       	ldi	r17, 0x00	; 0
/**This is the queue used to send data back to the command and control GUI. The #define UART_DEBUG can be used to disable normal serial activity through this queue
	The blue LED is used in this routine to signal buffer overflow, which, due to the real-time scheduled nature of the EEICM firmware architecture, should not happen.
	This function is inactive when in UART DEBUG mode. Calls to this function have no effect during this period.*/
inline void uart_enqueue(uint8_t datain){
#ifndef UART_DEBUG
	uart_buffer[uart_head] = datain;
    17ec:	c6 e2       	ldi	r28, 0x26	; 38
    17ee:	d1 e2       	ldi	r29, 0x21	; 33
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++){uart_enqueue((uint8_t)string_in[i]);}	
    17f0:	f7 01       	movw	r30, r14
    17f2:	81 91       	ld	r24, Z+
    17f4:	7f 01       	movw	r14, r30
/**This is the queue used to send data back to the command and control GUI. The #define UART_DEBUG can be used to disable normal serial activity through this queue
	The blue LED is used in this routine to signal buffer overflow, which, due to the real-time scheduled nature of the EEICM firmware architecture, should not happen.
	This function is inactive when in UART DEBUG mode. Calls to this function have no effect during this period.*/
inline void uart_enqueue(uint8_t datain){
#ifndef UART_DEBUG
	uart_buffer[uart_head] = datain;
    17f6:	90 91 25 21 	lds	r25, 0x2125
    17fa:	fe 01       	movw	r30, r28
    17fc:	e9 0f       	add	r30, r25
    17fe:	f1 1d       	adc	r31, r1
    1800:	80 83       	st	Z, r24
	uart_head++;
    1802:	80 91 25 21 	lds	r24, 0x2125
    1806:	8f 5f       	subi	r24, 0xFF	; 255
    1808:	80 93 25 21 	sts	0x2125, r24
	if (uart_head >= MAX_BUFFER_LEN){
    180c:	80 91 25 21 	lds	r24, 0x2125
    1810:	8a 3f       	cpi	r24, 0xFA	; 250
    1812:	10 f0       	brcs	.+4      	; 0x1818 <uart_enqueue_string+0x5c>
		uart_head = 0;
    1814:	10 92 25 21 	sts	0x2125, r1
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1818:	a0 91 24 22 	lds	r26, 0x2224
    181c:	b0 91 25 22 	lds	r27, 0x2225
    1820:	11 96       	adiw	r26, 0x01	; 1
    1822:	8c 91       	ld	r24, X
    1824:	11 97       	sbiw	r26, 0x01	; 1
    1826:	85 fd       	sbrc	r24, 5
    1828:	1c c0       	rjmp	.+56     	; 0x1862 <uart_enqueue_string+0xa6>
    182a:	2f c0       	rjmp	.+94     	; 0x188a <uart_enqueue_string+0xce>
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    182c:	80 91 21 22 	lds	r24, 0x2221
	uart_tail++;
    1830:	90 91 21 22 	lds	r25, 0x2221
    1834:	9f 5f       	subi	r25, 0xFF	; 255
    1836:	90 93 21 22 	sts	0x2221, r25
	if (uart_tail >= MAX_BUFFER_LEN){
    183a:	90 91 21 22 	lds	r25, 0x2221
    183e:	9a 3f       	cpi	r25, 0xFA	; 250
    1840:	10 f0       	brcs	.+4      	; 0x1846 <uart_enqueue_string+0x8a>
		uart_tail = 0;
    1842:	10 92 21 22 	sts	0x2221, r1
	}
	return uart_buffer[oldtail];
    1846:	fe 01       	movw	r30, r28
    1848:	e8 0f       	add	r30, r24
    184a:	f1 1d       	adc	r31, r1
    184c:	80 81       	ld	r24, Z
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		toSend = uart_dequeue();
		port->DATA = toSend;
    184e:	8c 93       	st	X, r24
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1850:	a0 91 24 22 	lds	r26, 0x2224
    1854:	b0 91 25 22 	lds	r27, 0x2225
    1858:	11 96       	adiw	r26, 0x01	; 1
    185a:	8c 91       	ld	r24, X
    185c:	11 97       	sbiw	r26, 0x01	; 1
    185e:	85 ff       	sbrs	r24, 5
    1860:	14 c0       	rjmp	.+40     	; 0x188a <uart_enqueue_string+0xce>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    1862:	90 91 25 21 	lds	r25, 0x2125
    1866:	80 91 21 22 	lds	r24, 0x2221
    186a:	98 17       	cp	r25, r24
    186c:	30 f0       	brcs	.+12     	; 0x187a <uart_enqueue_string+0xbe>
		return (uart_head - uart_tail);
    186e:	80 91 25 21 	lds	r24, 0x2125
    1872:	90 91 21 22 	lds	r25, 0x2221
    1876:	89 1b       	sub	r24, r25
    1878:	06 c0       	rjmp	.+12     	; 0x1886 <uart_enqueue_string+0xca>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    187a:	80 91 25 21 	lds	r24, 0x2125
    187e:	90 91 21 22 	lds	r25, 0x2221
    1882:	86 50       	subi	r24, 0x06	; 6
    1884:	89 1b       	sub	r24, r25
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1886:	88 23       	and	r24, r24
    1888:	89 f6       	brne	.-94     	; 0x182c <uart_enqueue_string+0x70>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    188a:	90 91 25 21 	lds	r25, 0x2125
    188e:	80 91 21 22 	lds	r24, 0x2221
    1892:	98 17       	cp	r25, r24
    1894:	30 f0       	brcs	.+12     	; 0x18a2 <uart_enqueue_string+0xe6>
		return (uart_head - uart_tail);
    1896:	80 91 25 21 	lds	r24, 0x2125
    189a:	90 91 21 22 	lds	r25, 0x2221
    189e:	89 1b       	sub	r24, r25
    18a0:	06 c0       	rjmp	.+12     	; 0x18ae <uart_enqueue_string+0xf2>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    18a2:	80 91 25 21 	lds	r24, 0x2125
    18a6:	90 91 21 22 	lds	r25, 0x2221
    18aa:	86 50       	subi	r24, 0x06	; 6
    18ac:	89 1b       	sub	r24, r25
		toSend = uart_dequeue();
		port->DATA = toSend;
	}

	//else: wait for the next tx complete to empty out the data register
	if(uart_count()>0) uart_txbuffer_enable();
    18ae:	88 23       	and	r24, r24
    18b0:	19 f0       	breq	.+6      	; 0x18b8 <uart_enqueue_string+0xfc>
    18b2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart_txbuffer_enable>
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <uart_enqueue_string+0x100>
	else uart_txbuffer_disable();
    18b8:	0e 94 c8 0a 	call	0x1590	; 0x1590 <uart_txbuffer_disable>
}

///Enqueue a string into the outgoing serial queue. Adds CR terminator to string.
inline void uart_enqueue_string(char* string_in){
	uint16_t length = (uint16_t)strlen(string_in);
	for (uint16_t i=0; i<length; i++){uart_enqueue((uint8_t)string_in[i]);}	
    18bc:	0f 5f       	subi	r16, 0xFF	; 255
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
    18c0:	0c 15       	cp	r16, r12
    18c2:	1d 05       	cpc	r17, r13
    18c4:	09 f0       	breq	.+2      	; 0x18c8 <uart_enqueue_string+0x10c>
    18c6:	94 cf       	rjmp	.-216    	; 0x17f0 <uart_enqueue_string+0x34>
}
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	1f 91       	pop	r17
    18ce:	0f 91       	pop	r16
    18d0:	ff 90       	pop	r15
    18d2:	ef 90       	pop	r14
    18d4:	df 90       	pop	r13
    18d6:	cf 90       	pop	r12
    18d8:	08 95       	ret

000018da <uart_enqueue>:
/**This is the queue used to send data back to the command and control GUI. The #define UART_DEBUG can be used to disable normal serial activity through this queue
	The blue LED is used in this routine to signal buffer overflow, which, due to the real-time scheduled nature of the EEICM firmware architecture, should not happen.
	This function is inactive when in UART DEBUG mode. Calls to this function have no effect during this period.*/
inline void uart_enqueue(uint8_t datain){
#ifndef UART_DEBUG
	uart_buffer[uart_head] = datain;
    18da:	90 91 25 21 	lds	r25, 0x2125
    18de:	e6 e2       	ldi	r30, 0x26	; 38
    18e0:	f1 e2       	ldi	r31, 0x21	; 33
    18e2:	e9 0f       	add	r30, r25
    18e4:	f1 1d       	adc	r31, r1
    18e6:	80 83       	st	Z, r24
	uart_head++;
    18e8:	80 91 25 21 	lds	r24, 0x2125
    18ec:	8f 5f       	subi	r24, 0xFF	; 255
    18ee:	80 93 25 21 	sts	0x2125, r24
	if (uart_head >= MAX_BUFFER_LEN){
    18f2:	80 91 25 21 	lds	r24, 0x2125
    18f6:	8a 3f       	cpi	r24, 0xFA	; 250
    18f8:	10 f0       	brcs	.+4      	; 0x18fe <uart_enqueue+0x24>
		uart_head = 0;
    18fa:	10 92 25 21 	sts	0x2125, r1
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    18fe:	e0 91 24 22 	lds	r30, 0x2224
    1902:	f0 91 25 22 	lds	r31, 0x2225
    1906:	81 81       	ldd	r24, Z+1	; 0x01
    1908:	85 fd       	sbrc	r24, 5
    190a:	1b c0       	rjmp	.+54     	; 0x1942 <uart_enqueue+0x68>
    190c:	30 c0       	rjmp	.+96     	; 0x196e <uart_enqueue+0x94>
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    190e:	20 91 21 22 	lds	r18, 0x2221
	uart_tail++;
    1912:	30 91 21 22 	lds	r19, 0x2221
    1916:	3f 5f       	subi	r19, 0xFF	; 255
    1918:	30 93 21 22 	sts	0x2221, r19
	if (uart_tail >= MAX_BUFFER_LEN){
    191c:	30 91 21 22 	lds	r19, 0x2221
    1920:	3a 3f       	cpi	r19, 0xFA	; 250
    1922:	10 f0       	brcs	.+4      	; 0x1928 <uart_enqueue+0x4e>
		uart_tail = 0;
    1924:	10 92 21 22 	sts	0x2221, r1
	}
	return uart_buffer[oldtail];
    1928:	dc 01       	movw	r26, r24
    192a:	a2 0f       	add	r26, r18
    192c:	b1 1d       	adc	r27, r1
    192e:	2c 91       	ld	r18, X
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
		toSend = uart_dequeue();
		port->DATA = toSend;
    1930:	20 83       	st	Z, r18
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    1932:	e0 91 24 22 	lds	r30, 0x2224
    1936:	f0 91 25 22 	lds	r31, 0x2225
    193a:	21 81       	ldd	r18, Z+1	; 0x01
    193c:	25 fd       	sbrc	r18, 5
    193e:	03 c0       	rjmp	.+6      	; 0x1946 <uart_enqueue+0x6c>
    1940:	16 c0       	rjmp	.+44     	; 0x196e <uart_enqueue+0x94>
	oldtail = uart_tail;
	uart_tail++;
	if (uart_tail >= MAX_BUFFER_LEN){
		uart_tail = 0;
	}
	return uart_buffer[oldtail];
    1942:	86 e2       	ldi	r24, 0x26	; 38
    1944:	91 e2       	ldi	r25, 0x21	; 33
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    1946:	30 91 25 21 	lds	r19, 0x2125
    194a:	20 91 21 22 	lds	r18, 0x2221
    194e:	32 17       	cp	r19, r18
    1950:	30 f0       	brcs	.+12     	; 0x195e <uart_enqueue+0x84>
		return (uart_head - uart_tail);
    1952:	20 91 25 21 	lds	r18, 0x2125
    1956:	30 91 21 22 	lds	r19, 0x2221
    195a:	23 1b       	sub	r18, r19
    195c:	06 c0       	rjmp	.+12     	; 0x196a <uart_enqueue+0x90>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    195e:	20 91 25 21 	lds	r18, 0x2125
    1962:	30 91 21 22 	lds	r19, 0x2221
    1966:	26 50       	subi	r18, 0x06	; 6
    1968:	23 1b       	sub	r18, r19
//and we have data to send. (helper function to the ISR so that we can initiate
//the first transfer
void inline uart_transmit(){
	uint8_t toSend;
	//keep loading until data register is full or outgoing queue is empty
	while (((port->STATUS & _BV(5)) == B8(00100000)) && (uart_count() > 0)){
    196a:	22 23       	and	r18, r18
    196c:	81 f6       	brne	.-96     	; 0x190e <uart_enqueue+0x34>
	uart_head = 0;
	uart_tail = 0;
}

inline uint8_t uart_count(void){
	if (uart_head >= uart_tail){	
    196e:	90 91 25 21 	lds	r25, 0x2125
    1972:	80 91 21 22 	lds	r24, 0x2221
    1976:	98 17       	cp	r25, r24
    1978:	30 f0       	brcs	.+12     	; 0x1986 <uart_enqueue+0xac>
		return (uart_head - uart_tail);
    197a:	80 91 25 21 	lds	r24, 0x2125
    197e:	90 91 21 22 	lds	r25, 0x2221
    1982:	89 1b       	sub	r24, r25
    1984:	06 c0       	rjmp	.+12     	; 0x1992 <uart_enqueue+0xb8>
	}
	else {
		return ((MAX_BUFFER_LEN-uart_tail)+uart_head);
    1986:	80 91 25 21 	lds	r24, 0x2125
    198a:	90 91 21 22 	lds	r25, 0x2221
    198e:	86 50       	subi	r24, 0x06	; 6
    1990:	89 1b       	sub	r24, r25
		toSend = uart_dequeue();
		port->DATA = toSend;
	}

	//else: wait for the next tx complete to empty out the data register
	if(uart_count()>0) uart_txbuffer_enable();
    1992:	88 23       	and	r24, r24
    1994:	19 f0       	breq	.+6      	; 0x199c <uart_enqueue+0xc2>
    1996:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart_txbuffer_enable>
    199a:	08 95       	ret
	else uart_txbuffer_disable();
    199c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <uart_txbuffer_disable>
    19a0:	08 95       	ret

000019a2 <uart_dequeue>:
#endif
}

inline uint8_t uart_dequeue(void){
	uint8_t oldtail;
	oldtail = uart_tail;
    19a2:	80 91 21 22 	lds	r24, 0x2221
	uart_tail++;
    19a6:	90 91 21 22 	lds	r25, 0x2221
    19aa:	9f 5f       	subi	r25, 0xFF	; 255
    19ac:	90 93 21 22 	sts	0x2221, r25
	if (uart_tail >= MAX_BUFFER_LEN){
    19b0:	90 91 21 22 	lds	r25, 0x2221
    19b4:	9a 3f       	cpi	r25, 0xFA	; 250
    19b6:	10 f0       	brcs	.+4      	; 0x19bc <uart_dequeue+0x1a>
		uart_tail = 0;
    19b8:	10 92 21 22 	sts	0x2221, r1
	}
	return uart_buffer[oldtail];
    19bc:	e6 e2       	ldi	r30, 0x26	; 38
    19be:	f1 e2       	ldi	r31, 0x21	; 33
    19c0:	e8 0f       	add	r30, r24
    19c2:	f1 1d       	adc	r31, r1
    19c4:	80 81       	ld	r24, Z
}
    19c6:	08 95       	ret

000019c8 <init_uart_ibuffer>:
/** Insert from head. Read from tail. The goal is to be fast (very fast) and light.
	No protection is provided for buffer overflow! Be careful! */
//***************************************************

void init_uart_ibuffer(void){
	uart_ihead = 0;
    19c8:	10 92 20 22 	sts	0x2220, r1
	uart_itail = 0;
    19cc:	10 92 1d 20 	sts	0x201D, r1
}
    19d0:	08 95       	ret

000019d2 <init_uart_buffer>:
//************************************************************************

//MAKE SURE TO INIT UART FIRST
void init_uart_buffer(USART_t* which){
	//Setup UART hardware
		port = which;
    19d2:	80 93 24 22 	sts	0x2224, r24
    19d6:	90 93 25 22 	sts	0x2225, r25
		
	//Setup data buffers
		init_uart_obuffer();
    19da:	0e 94 c6 0b 	call	0x178c	; 0x178c <init_uart_obuffer>
		init_uart_ibuffer();
    19de:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <init_uart_ibuffer>
	
	//Enable Receive and Transmit interrupts
		uart_rxbuffer_enable();
    19e2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <uart_rxbuffer_enable>
		uart_txbuffer_enable();		
    19e6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <uart_txbuffer_enable>
}
    19ea:	08 95       	ret

000019ec <uart_icount>:
	uart_ihead = 0;
	uart_itail = 0;
}

inline uint8_t uart_icount(void){
	if (uart_ihead >= uart_itail){	
    19ec:	90 91 20 22 	lds	r25, 0x2220
    19f0:	80 91 1d 20 	lds	r24, 0x201D
    19f4:	98 17       	cp	r25, r24
    19f6:	30 f0       	brcs	.+12     	; 0x1a04 <uart_icount+0x18>
		return (uart_ihead - uart_itail);
    19f8:	80 91 20 22 	lds	r24, 0x2220
    19fc:	90 91 1d 20 	lds	r25, 0x201D
    1a00:	89 1b       	sub	r24, r25
    1a02:	08 95       	ret
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
    1a04:	80 91 20 22 	lds	r24, 0x2220
    1a08:	90 91 1d 20 	lds	r25, 0x201D
    1a0c:	86 50       	subi	r24, 0x06	; 6
    1a0e:	89 1b       	sub	r24, r25
	}
}
    1a10:	08 95       	ret

00001a12 <uart_ienqueue>:

inline void uart_ienqueue(uint8_t datain){
	uart_ibuffer[uart_ihead] = datain;
    1a12:	90 91 20 22 	lds	r25, 0x2220
    1a16:	ee e1       	ldi	r30, 0x1E	; 30
    1a18:	f0 e2       	ldi	r31, 0x20	; 32
    1a1a:	e9 0f       	add	r30, r25
    1a1c:	f1 1d       	adc	r31, r1
    1a1e:	80 83       	st	Z, r24
	uart_ihead++;
    1a20:	80 91 20 22 	lds	r24, 0x2220
    1a24:	8f 5f       	subi	r24, 0xFF	; 255
    1a26:	80 93 20 22 	sts	0x2220, r24
	if (uart_ihead >= MAX_IBUFFER_LEN){
    1a2a:	80 91 20 22 	lds	r24, 0x2220
    1a2e:	8a 3f       	cpi	r24, 0xFA	; 250
    1a30:	10 f0       	brcs	.+4      	; 0x1a36 <uart_ienqueue+0x24>
		uart_ihead = 0;
    1a32:	10 92 20 22 	sts	0x2220, r1
    1a36:	08 95       	ret

00001a38 <uart_idequeue>:
	}
}

inline uint8_t uart_idequeue(void){
	uint8_t oldtail;
	oldtail = uart_itail;
    1a38:	80 91 1d 20 	lds	r24, 0x201D
	uart_itail++;
    1a3c:	90 91 1d 20 	lds	r25, 0x201D
    1a40:	9f 5f       	subi	r25, 0xFF	; 255
    1a42:	90 93 1d 20 	sts	0x201D, r25
	if (uart_itail >= MAX_IBUFFER_LEN){
    1a46:	90 91 1d 20 	lds	r25, 0x201D
    1a4a:	9a 3f       	cpi	r25, 0xFA	; 250
    1a4c:	10 f0       	brcs	.+4      	; 0x1a52 <uart_idequeue+0x1a>
		uart_itail = 0;
    1a4e:	10 92 1d 20 	sts	0x201D, r1
	}
	return uart_ibuffer[oldtail];
    1a52:	ee e1       	ldi	r30, 0x1E	; 30
    1a54:	f0 e2       	ldi	r31, 0x20	; 32
    1a56:	e8 0f       	add	r30, r24
    1a58:	f1 1d       	adc	r31, r1
    1a5a:	80 81       	ld	r24, Z
}
    1a5c:	08 95       	ret

00001a5e <service_uart_buffer>:
	uart_ihead = 0;
	uart_itail = 0;
}

inline uint8_t uart_icount(void){
	if (uart_ihead >= uart_itail){	
    1a5e:	90 91 20 22 	lds	r25, 0x2220
    1a62:	80 91 1d 20 	lds	r24, 0x201D
    1a66:	98 17       	cp	r25, r24
    1a68:	30 f0       	brcs	.+12     	; 0x1a76 <service_uart_buffer+0x18>
		return (uart_ihead - uart_itail);
    1a6a:	80 91 20 22 	lds	r24, 0x2220
    1a6e:	90 91 1d 20 	lds	r25, 0x201D
    1a72:	89 1b       	sub	r24, r25
    1a74:	06 c0       	rjmp	.+12     	; 0x1a82 <service_uart_buffer+0x24>
	}
	else {
		return ((MAX_IBUFFER_LEN-uart_itail)+uart_ihead);
    1a76:	80 91 20 22 	lds	r24, 0x2220
    1a7a:	90 91 1d 20 	lds	r25, 0x201D
    1a7e:	86 50       	subi	r24, 0x06	; 6
    1a80:	89 1b       	sub	r24, r25
	uart_send_byte(&udata, ":");
	for (uint8_t i=0; i<uart_icount(); i++){uart_send_byte(&udata, uart_ibuffer[i]);}
}

inline void service_uart_buffer(){
	if (uart_icount() > 0) {pwm_hunt_target();}
    1a82:	88 23       	and	r24, r24
    1a84:	11 f0       	breq	.+4      	; 0x1a8a <service_uart_buffer+0x2c>
    1a86:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <pwm_hunt_target>
    1a8a:	08 95       	ret

00001a8c <init_ui>:

//Handles all UI hardware (buttons, switches, and lights)

void init_ui(){
	//LED's are located at PD0 (Middle) and PD4 (Left)
	PORTD.DIRSET = 0x11; //pins 0 and 4 to output
    1a8c:	e0 e6       	ldi	r30, 0x60	; 96
    1a8e:	f6 e0       	ldi	r31, 0x06	; 6
    1a90:	81 e1       	ldi	r24, 0x11	; 17
    1a92:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = 0x11; //pins 0 and 4 to high (off)
    1a94:	85 83       	std	Z+5, r24	; 0x05
	PORTD.PIN0CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    1a96:	80 e4       	ldi	r24, 0x40	; 64
    1a98:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.PIN4CTRL = B8(01000000); //Invert the pin (needed to achieve correct PWM output polarity)
    1a9a:	84 8b       	std	Z+20, r24	; 0x14
	TCD0.CTRLA = 0x07; //enable; div1024
    1a9c:	e0 e0       	ldi	r30, 0x00	; 0
    1a9e:	f9 e0       	ldi	r31, 0x09	; 9
    1aa0:	57 e0       	ldi	r21, 0x07	; 7
    1aa2:	50 83       	st	Z, r21
	TCD0.CTRLB = 0x13; //Output Channel A enable; Single-slope PWM
    1aa4:	43 e1       	ldi	r20, 0x13	; 19
    1aa6:	41 83       	std	Z+1, r20	; 0x01
	TCD0.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    1aa8:	8f ef       	ldi	r24, 0xFF	; 255
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	86 a3       	lds	r24, 0x56
    1aae:	97 a3       	lds	r25, 0x57
	TCD0.CCA = 0x0080; //Default to off-level brightness
    1ab0:	20 e8       	ldi	r18, 0x80	; 128
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	20 a7       	lds	r18, 0x70
    1ab6:	31 a7       	lds	r19, 0x71
	TCD1.CTRLA = 0x07; //enable; div1024
    1ab8:	e0 e4       	ldi	r30, 0x40	; 64
    1aba:	f9 e0       	ldi	r31, 0x09	; 9
    1abc:	50 83       	st	Z, r21
	TCD1.CTRLB = 0x13; //Output Channel A enable; Single-slope PWM
    1abe:	41 83       	std	Z+1, r20	; 0x01
	TCD1.PER = 0x00FF; //Set the top of the counter to basically force 8 bit operation; we do this for speed when calling dimming functions in the future
    1ac0:	86 a3       	lds	r24, 0x56
    1ac2:	97 a3       	lds	r25, 0x57
	TCD1.CCA = 0x0010; //Default to off-level brightness
    1ac4:	80 e1       	ldi	r24, 0x10	; 16
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	80 a7       	lds	r24, 0x70
    1aca:	91 a7       	lds	r25, 0x71

	//Switches need pull-up resistance
	//	Switches: PC5 = SW1; PC4 = SW2; PC3 = SW3
	PORTC.DIRCLR = B8(00111100); //This is the default condition, but just to be safe
    1acc:	e0 e4       	ldi	r30, 0x40	; 64
    1ace:	f6 e0       	ldi	r31, 0x06	; 6
    1ad0:	8c e3       	ldi	r24, 0x3C	; 60
    1ad2:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN5CTRL = B8(10011000); //Slew rate limiter on; Internal pull-up on; Sense on both input edges
    1ad4:	88 e9       	ldi	r24, 0x98	; 152
    1ad6:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN4CTRL = B8(10011000); //Slew rate limiter on; Internal pull-up on; Sense on both input edges
    1ad8:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN3CTRL = B8(10011000); //Slew rate limiter on; Internal pull-up on; Sense on both input edges	
    1ada:	83 8b       	std	Z+19, r24	; 0x13
	//Button requirements
	//	Button Interrupt Controls
	//	Button: PC2 = Button0
	#define RISING_EDGE 	B8(10011001) //Slew rate limiter on; Internal pull-up on; Sense on rising input edges
	#define FALLING_EDGE 	B8(10011010) //Slew rate limiter on; Internal pull-up on; Sense on falling input edges
	PORTC.INT0MASK = B8(00000100); //Enable interrupt0 channel for PC2 
    1adc:	84 e0       	ldi	r24, 0x04	; 4
    1ade:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.INTCTRL = B8(00000011); //interrupt0 channel set to high priority
    1ae0:	83 e0       	ldi	r24, 0x03	; 3
    1ae2:	81 87       	std	Z+9, r24	; 0x09
	PORTC.PIN2CTRL = FALLING_EDGE; 
    1ae4:	8a e9       	ldi	r24, 0x9A	; 154
    1ae6:	82 8b       	std	Z+18, r24	; 0x12
	STATE_Button = BUTTON_IDLE;
    1ae8:	10 92 15 20 	sts	0x2015, r1
}
    1aec:	08 95       	ret

00001aee <led_dim>:
void led_on(uint8_t which){led_dim(which, 0xff);}

void led_off(uint8_t which){led_dim(which, 0x00);}

void led_dim(uint8_t which, uint8_t brightness){
	switch(which){
    1aee:	88 23       	and	r24, r24
    1af0:	19 f0       	breq	.+6      	; 0x1af8 <led_dim+0xa>
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	61 f4       	brne	.+24     	; 0x1b0e <led_dim+0x20>
    1af6:	06 c0       	rjmp	.+12     	; 0x1b04 <led_dim+0x16>
	case LED_LEFT:
		TCD1.CCABUF = (uint16_t)brightness;		
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	e0 e4       	ldi	r30, 0x40	; 64
    1afc:	f9 e0       	ldi	r31, 0x09	; 9
    1afe:	60 af       	sts	0x70, r22
    1b00:	71 af       	sts	0x71, r23
		break;
    1b02:	08 95       	ret
	case LED_MID:
		TCD0.CCABUF = (uint16_t)brightness;		
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	e0 e0       	ldi	r30, 0x00	; 0
    1b08:	f9 e0       	ldi	r31, 0x09	; 9
    1b0a:	60 af       	sts	0x70, r22
    1b0c:	71 af       	sts	0x71, r23
    1b0e:	08 95       	ret

00001b10 <led_off>:
//## LEDs
//#############################################################

void led_on(uint8_t which){led_dim(which, 0xff);}

void led_off(uint8_t which){led_dim(which, 0x00);}
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	0e 94 77 0d 	call	0x1aee	; 0x1aee <led_dim>
    1b16:	08 95       	ret

00001b18 <led_on>:

//#############################################################
//## LEDs
//#############################################################

void led_on(uint8_t which){led_dim(which, 0xff);}
    1b18:	6f ef       	ldi	r22, 0xFF	; 255
    1b1a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <led_dim>
    1b1e:	08 95       	ret

00001b20 <led_toggle>:
		break;
	}
}

void led_toggle(uint8_t which){
	switch(which){
    1b20:	88 23       	and	r24, r24
    1b22:	19 f0       	breq	.+6      	; 0x1b2a <led_toggle+0xa>
    1b24:	81 30       	cpi	r24, 0x01	; 1
    1b26:	61 f4       	brne	.+24     	; 0x1b40 <led_toggle+0x20>
    1b28:	06 c0       	rjmp	.+12     	; 0x1b36 <led_toggle+0x16>
	case LED_LEFT:
		TCD1.CCAL = ~TCD1.CCAL;		
    1b2a:	e0 e4       	ldi	r30, 0x40	; 64
    1b2c:	f9 e0       	ldi	r31, 0x09	; 9
    1b2e:	80 a5       	lds	r24, 0x60
    1b30:	80 95       	com	r24
    1b32:	80 a7       	lds	r24, 0x70
		break;
    1b34:	08 95       	ret
	case LED_MID:
		TCD0.CCAL = ~TCD0.CCAL;		
    1b36:	e0 e0       	ldi	r30, 0x00	; 0
    1b38:	f9 e0       	ldi	r31, 0x09	; 9
    1b3a:	80 a5       	lds	r24, 0x60
    1b3c:	80 95       	com	r24
    1b3e:	80 a7       	lds	r24, 0x70
    1b40:	08 95       	ret

00001b42 <service_leds>:
	}
}

void service_leds(){

}
    1b42:	08 95       	ret

00001b44 <__vector_2>:
//#############################################################
//## BUTTON -- Interrupt driven
//#############################################################

//Caution with programatic use as I do not implement switch debouncing
SIGNAL(PORTC_INT0_vect){
    1b44:	1f 92       	push	r1
    1b46:	0f 92       	push	r0
    1b48:	0f b6       	in	r0, 0x3f	; 63
    1b4a:	0f 92       	push	r0
    1b4c:	11 24       	eor	r1, r1
    1b4e:	8f 93       	push	r24
    1b50:	ef 93       	push	r30
    1b52:	ff 93       	push	r31
	if (PORTC.PIN2CTRL == FALLING_EDGE){
    1b54:	e0 e4       	ldi	r30, 0x40	; 64
    1b56:	f6 e0       	ldi	r31, 0x06	; 6
    1b58:	82 89       	ldd	r24, Z+18	; 0x12
    1b5a:	8a 39       	cpi	r24, 0x9A	; 154
    1b5c:	31 f4       	brne	.+12     	; 0x1b6a <__vector_2+0x26>
		//Just detected a falling edge (button has been pressed in)
		PORTC.PIN2CTRL = RISING_EDGE;
    1b5e:	89 e9       	ldi	r24, 0x99	; 153
    1b60:	82 8b       	std	Z+18, r24	; 0x12
		STATE_Button = BUTTON_PUSHED;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	80 93 15 20 	sts	0x2015, r24
    1b68:	07 c0       	rjmp	.+14     	; 0x1b78 <__vector_2+0x34>
	}
	else {
		//Just detected a rising edge (button has been released)
		PORTC.PIN2CTRL = FALLING_EDGE;
    1b6a:	8a e9       	ldi	r24, 0x9A	; 154
    1b6c:	e0 e4       	ldi	r30, 0x40	; 64
    1b6e:	f6 e0       	ldi	r31, 0x06	; 6
    1b70:	82 8b       	std	Z+18, r24	; 0x12
		STATE_Button = BUTTON_RELEASED;
    1b72:	82 e0       	ldi	r24, 0x02	; 2
    1b74:	80 93 15 20 	sts	0x2015, r24
	}
}
    1b78:	ff 91       	pop	r31
    1b7a:	ef 91       	pop	r30
    1b7c:	8f 91       	pop	r24
    1b7e:	0f 90       	pop	r0
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	0f 90       	pop	r0
    1b84:	1f 90       	pop	r1
    1b86:	18 95       	reti

00001b88 <service_button>:
		//Actions when the button is pushed and held down
	}
	else {
		//Actions when the button is not pressed or held
	}
}
    1b88:	08 95       	ret

00001b8a <sw_on>:
//## SWITCHESs -- Polling only
//#############################################################

//	Switches: PC5 = SW1; PC4 = SW2; PC3 = SW3
boolean sw_on(uint8_t which){
	switch(which){
    1b8a:	81 30       	cpi	r24, 0x01	; 1
    1b8c:	69 f0       	breq	.+26     	; 0x1ba8 <sw_on+0x1e>
    1b8e:	81 30       	cpi	r24, 0x01	; 1
    1b90:	18 f0       	brcs	.+6      	; 0x1b98 <sw_on+0xe>
    1b92:	82 30       	cpi	r24, 0x02	; 2
    1b94:	c9 f4       	brne	.+50     	; 0x1bc8 <sw_on+0x3e>
    1b96:	10 c0       	rjmp	.+32     	; 0x1bb8 <sw_on+0x2e>
	case SW1:
		if ((PORTC.IN & _BV(5)) == 0x00){
    1b98:	e0 e4       	ldi	r30, 0x40	; 64
    1b9a:	f6 e0       	ldi	r31, 0x06	; 6
    1b9c:	90 85       	ldd	r25, Z+8	; 0x08
			//Switch is closed (on)
			return true;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	95 ff       	sbrs	r25, 5
    1ba2:	13 c0       	rjmp	.+38     	; 0x1bca <sw_on+0x40>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	08 95       	ret
			//Switch is open (off)
			return false;
		}
		break;
	case SW2:
		if ((PORTC.IN & _BV(4)) == 0x00){
    1ba8:	e0 e4       	ldi	r30, 0x40	; 64
    1baa:	f6 e0       	ldi	r31, 0x06	; 6
    1bac:	90 85       	ldd	r25, Z+8	; 0x08
boolean sw_on(uint8_t which){
	switch(which){
	case SW1:
		if ((PORTC.IN & _BV(5)) == 0x00){
			//Switch is closed (on)
			return true;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	94 ff       	sbrs	r25, 4
    1bb2:	0b c0       	rjmp	.+22     	; 0x1bca <sw_on+0x40>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	08 95       	ret
			//Switch is open (off)
			return false;
		}
		break;
	case SW3:
		if ((PORTC.IN & _BV(3)) == 0x00){
    1bb8:	e0 e4       	ldi	r30, 0x40	; 64
    1bba:	f6 e0       	ldi	r31, 0x06	; 6
    1bbc:	90 85       	ldd	r25, Z+8	; 0x08
boolean sw_on(uint8_t which){
	switch(which){
	case SW1:
		if ((PORTC.IN & _BV(5)) == 0x00){
			//Switch is closed (on)
			return true;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	93 ff       	sbrs	r25, 3
    1bc2:	03 c0       	rjmp	.+6      	; 0x1bca <sw_on+0x40>
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	08 95       	ret
			//Switch is open (off)
			return false;
		}
		break;
	default:
		return false;
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1bca:	08 95       	ret

00001bcc <service_switches>:

void service_switches(){
	static uint8_t mode = 0; //Store prior MODE state

	//[Switch 1] Audio vs. Photodiode Mode -- use pwm.c / pwm_mode() to test condition
	if (sw_on(SW1) == true){
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <sw_on>
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	51 f4       	brne	.+20     	; 0x1bea <service_switches+0x1e>
		if (mode != MODE_AUDIO){
    1bd6:	80 91 14 20 	lds	r24, 0x2014
    1bda:	85 33       	cpi	r24, 0x35	; 53
    1bdc:	79 f0       	breq	.+30     	; 0x1bfc <service_switches+0x30>
			//Just changed modes into AUDIO mode!
			mode = MODE_AUDIO; //update state
    1bde:	85 e3       	ldi	r24, 0x35	; 53
    1be0:	80 93 14 20 	sts	0x2014, r24
			pwm_enable(); //turn on AUDIO mode interrupts and configure!
    1be4:	0e 94 aa 03 	call	0x754	; 0x754 <pwm_enable>
    1be8:	09 c0       	rjmp	.+18     	; 0x1bfc <service_switches+0x30>
		}
	}
	else {
		if (mode != MODE_PHOTO){
    1bea:	80 91 14 20 	lds	r24, 0x2014
    1bee:	86 33       	cpi	r24, 0x36	; 54
    1bf0:	29 f0       	breq	.+10     	; 0x1bfc <service_switches+0x30>
			//Just changed modes into PHOTO mode!
			mode = MODE_PHOTO; //update state
    1bf2:	86 e3       	ldi	r24, 0x36	; 54
    1bf4:	80 93 14 20 	sts	0x2014, r24
			pwm_disable();
    1bf8:	0e 94 ce 03 	call	0x79c	; 0x79c <pwm_disable>
		}
	}
	//[Switch 2] Output polarity
	if (sw_on(SW2) == true){
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <sw_on>
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	61 f4       	brne	.+24     	; 0x1c1e <service_switches+0x52>
		if (pwm_mode() == false) ac_polarity(IDLE_HIGH);
    1c06:	0e 94 d6 03 	call	0x7ac	; 0x7ac <pwm_mode>
    1c0a:	88 23       	and	r24, r24
    1c0c:	21 f4       	brne	.+8      	; 0x1c16 <service_switches+0x4a>
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	0e 94 00 01 	call	0x200	; 0x200 <ac_polarity>
    1c14:	0f c0       	rjmp	.+30     	; 0x1c34 <service_switches+0x68>
		else pwm_polarity(NEGATIVE_PULSE);
    1c16:	88 e5       	ldi	r24, 0x58	; 88
    1c18:	0e 94 da 03 	call	0x7b4	; 0x7b4 <pwm_polarity>
    1c1c:	0b c0       	rjmp	.+22     	; 0x1c34 <service_switches+0x68>
	}
	else {
		if (pwm_mode() == false) ac_polarity(IDLE_LOW);
    1c1e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <pwm_mode>
    1c22:	88 23       	and	r24, r24
    1c24:	21 f4       	brne	.+8      	; 0x1c2e <service_switches+0x62>
    1c26:	82 e0       	ldi	r24, 0x02	; 2
    1c28:	0e 94 00 01 	call	0x200	; 0x200 <ac_polarity>
    1c2c:	03 c0       	rjmp	.+6      	; 0x1c34 <service_switches+0x68>
		else pwm_polarity(POSITIVE_PULSE);
    1c2e:	87 e5       	ldi	r24, 0x57	; 87
    1c30:	0e 94 da 03 	call	0x7b4	; 0x7b4 <pwm_polarity>
	}
	//[Switch 3] Hysteresis enable
	if (sw_on(SW3) == true){
    1c34:	82 e0       	ldi	r24, 0x02	; 2
    1c36:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <sw_on>
    1c3a:	81 30       	cpi	r24, 0x01	; 1
    1c3c:	41 f4       	brne	.+16     	; 0x1c4e <service_switches+0x82>
		if (pwm_mode() == false) ac_hysteresis(LARGE);
    1c3e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <pwm_mode>
    1c42:	88 23       	and	r24, r24
    1c44:	51 f4       	brne	.+20     	; 0x1c5a <service_switches+0x8e>
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ac_hysteresis>
    1c4c:	08 95       	ret
	}
	else {
		if (pwm_mode() == false) ac_hysteresis(NONE);
    1c4e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <pwm_mode>
    1c52:	88 23       	and	r24, r24
    1c54:	11 f4       	brne	.+4      	; 0x1c5a <service_switches+0x8e>
    1c56:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ac_hysteresis>
    1c5a:	08 95       	ret

00001c5c <__udivmodsi4>:
    1c5c:	a1 e2       	ldi	r26, 0x21	; 33
    1c5e:	1a 2e       	mov	r1, r26
    1c60:	aa 1b       	sub	r26, r26
    1c62:	bb 1b       	sub	r27, r27
    1c64:	fd 01       	movw	r30, r26
    1c66:	0d c0       	rjmp	.+26     	; 0x1c82 <__udivmodsi4_ep>

00001c68 <__udivmodsi4_loop>:
    1c68:	aa 1f       	adc	r26, r26
    1c6a:	bb 1f       	adc	r27, r27
    1c6c:	ee 1f       	adc	r30, r30
    1c6e:	ff 1f       	adc	r31, r31
    1c70:	a2 17       	cp	r26, r18
    1c72:	b3 07       	cpc	r27, r19
    1c74:	e4 07       	cpc	r30, r20
    1c76:	f5 07       	cpc	r31, r21
    1c78:	20 f0       	brcs	.+8      	; 0x1c82 <__udivmodsi4_ep>
    1c7a:	a2 1b       	sub	r26, r18
    1c7c:	b3 0b       	sbc	r27, r19
    1c7e:	e4 0b       	sbc	r30, r20
    1c80:	f5 0b       	sbc	r31, r21

00001c82 <__udivmodsi4_ep>:
    1c82:	66 1f       	adc	r22, r22
    1c84:	77 1f       	adc	r23, r23
    1c86:	88 1f       	adc	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	1a 94       	dec	r1
    1c8c:	69 f7       	brne	.-38     	; 0x1c68 <__udivmodsi4_loop>
    1c8e:	60 95       	com	r22
    1c90:	70 95       	com	r23
    1c92:	80 95       	com	r24
    1c94:	90 95       	com	r25
    1c96:	9b 01       	movw	r18, r22
    1c98:	ac 01       	movw	r20, r24
    1c9a:	bd 01       	movw	r22, r26
    1c9c:	cf 01       	movw	r24, r30
    1c9e:	08 95       	ret

00001ca0 <_exit>:
    1ca0:	f8 94       	cli

00001ca2 <__stop_program>:
    1ca2:	ff cf       	rjmp	.-2      	; 0x1ca2 <__stop_program>
